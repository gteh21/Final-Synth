
CPE187-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08007d94  08007d94  00008d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008678  08008678  0000a06c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008678  08008678  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008680  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00002120  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000218c  2000218c  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4f7  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b2  00000000  00000000  00029593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  0002d748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c3  00000000  00000000  0002f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000403b  00000000  00000000  00030463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef03  00000000  00000000  0003449e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1ddd  00000000  00000000  000533a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010517e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e34  00000000  00000000  001051c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0010bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d7c 	.word	0x08007d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007d7c 	.word	0x08007d7c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 ffbc 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82e 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f98a 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001e0:	f000 f96a 	bl	80004b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f938 	bl	8000458 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001e8:	f000 f8a2 	bl	8000330 <MX_I2C1_Init>
  MX_DAC1_Init();
 80001ec:	f000 f876 	bl	80002dc <MX_DAC1_Init>
  MX_TIM2_Init();
 80001f0:	f000 f8e6 	bl	80003c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f004 ff26 	bl	8005044 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <main+0x50>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4809      	ldr	r0, [pc, #36]	@ (8000224 <main+0x54>)
 80001fe:	f004 ff89 	bl	8005114 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a08      	ldr	r2, [pc, #32]	@ (8000228 <main+0x58>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of ScreenUpdate */
  ScreenUpdateHandle = osThreadNew(StartScreenUpdate, NULL, &ScreenUpdate_attributes);
 8000208:	4a08      	ldr	r2, [pc, #32]	@ (800022c <main+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4808      	ldr	r0, [pc, #32]	@ (8000230 <main+0x60>)
 800020e:	f004 ff81 	bl	8005114 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a07      	ldr	r2, [pc, #28]	@ (8000234 <main+0x64>)
 8000216:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000218:	f004 ff48 	bl	80050ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	bf00      	nop
 800021e:	e7fd      	b.n	800021c <main+0x4c>
 8000220:	08007e0c 	.word	0x08007e0c
 8000224:	08000579 	.word	0x08000579
 8000228:	20000208 	.word	0x20000208
 800022c:	08007e30 	.word	0x08007e30
 8000230:	0800068d 	.word	0x0800068d
 8000234:	2000020c 	.word	0x2000020c

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	@ 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000242:	2228      	movs	r2, #40	@ 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f007 fca8 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 031c 	add.w	r3, r7, #28
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
 800026a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	2300      	movs	r3, #0
 800027a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fad5 	bl	8002830 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 fa98 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 face 	bl	800384c <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 fa83 	bl	80007c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002ba:	2320      	movs	r3, #32
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f003 fd05 	bl	8003cd4 <HAL_RCCEx_PeriphCLKConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002d0:	f000 fa76 	bl	80007c0 <Error_Handler>
  }
}
 80002d4:	bf00      	nop
 80002d6:	3758      	adds	r7, #88	@ 0x58
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_DAC1_Init+0x4c>)
 80002ee:	4a0f      	ldr	r2, [pc, #60]	@ (800032c <MX_DAC1_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <MX_DAC1_Init+0x4c>)
 80002f4:	f001 f868 	bl	80013c8 <HAL_DAC_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80002fe:	f000 fa5f 	bl	80007c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000302:	2324      	movs	r3, #36	@ 0x24
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	4619      	mov	r1, r3
 8000310:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_DAC1_Init+0x4c>)
 8000312:	f001 f9b9 	bl	8001688 <HAL_DAC_ConfigChannel>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800031c:	f000 fa50 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000088 	.word	0x20000088
 800032c:	40007400 	.word	0x40007400

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1e      	ldr	r3, [pc, #120]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000336:	4a1f      	ldr	r2, [pc, #124]	@ (80003b4 <MX_I2C1_Init+0x84>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100001;
 800033a:	4b1d      	ldr	r3, [pc, #116]	@ (80003b0 <MX_I2C1_Init+0x80>)
 800033c:	4a1e      	ldr	r2, [pc, #120]	@ (80003b8 <MX_I2C1_Init+0x88>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000340:	4b1b      	ldr	r3, [pc, #108]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b1a      	ldr	r3, [pc, #104]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_I2C1_Init+0x80>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <MX_I2C1_Init+0x80>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036a:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <MX_I2C1_Init+0x80>)
 800036c:	f001 fdaa 	bl	8001ec4 <HAL_I2C_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 fa23 	bl	80007c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	2100      	movs	r1, #0
 800037c:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <MX_I2C1_Init+0x80>)
 800037e:	f002 f9bf 	bl	8002700 <HAL_I2CEx_ConfigAnalogFilter>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 fa1a 	bl	80007c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038c:	2100      	movs	r1, #0
 800038e:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <MX_I2C1_Init+0x80>)
 8000390:	f002 fa01 	bl	8002796 <HAL_I2CEx_ConfigDigitalFilter>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 fa11 	bl	80007c0 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800039e:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <MX_I2C1_Init+0x8c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a06      	ldr	r2, [pc, #24]	@ (80003bc <MX_I2C1_Init+0x8c>)
 80003a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000e0 	.word	0x200000e0
 80003b4:	40005400 	.word	0x40005400
 80003b8:	00100001 	.word	0x00100001
 80003bc:	40010000 	.word	0x40010000

080003c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <MX_TIM2_Init+0x94>)
 80003e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_TIM2_Init+0x94>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <MX_TIM2_Init+0x94>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80003f2:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <MX_TIM2_Init+0x94>)
 80003f4:	224f      	movs	r2, #79	@ 0x4f
 80003f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f8:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <MX_TIM2_Init+0x94>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_TIM2_Init+0x94>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000404:	4813      	ldr	r0, [pc, #76]	@ (8000454 <MX_TIM2_Init+0x94>)
 8000406:	f003 fd89 	bl	8003f1c <HAL_TIM_Base_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000410:	f000 f9d6 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <MX_TIM2_Init+0x94>)
 8000422:	f003 ffd4 	bl	80043ce <HAL_TIM_ConfigClockSource>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800042c:	f000 f9c8 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_TIM2_Init+0x94>)
 800043e:	f004 f9d5 	bl	80047ec <HAL_TIMEx_MasterConfigSynchronization>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 f9ba 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000134 	.word	0x20000134

08000458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 800045e:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <MX_USART2_UART_Init+0x5c>)
 8000460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000464:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_USART2_UART_Init+0x58>)
 800049c:	f004 fa32 	bl	8004904 <HAL_UART_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004a6:	f000 f98b 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000180 	.word	0x20000180
 80004b4:	40004400 	.word	0x40004400

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a0b      	ldr	r2, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2105      	movs	r1, #5
 80004da:	200d      	movs	r0, #13
 80004dc:	f000 ff4a 	bl	8001374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004e0:	200d      	movs	r0, #13
 80004e2:	f000 ff63 	bl	80013ac <HAL_NVIC_EnableIRQ>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050a:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <MX_GPIO_Init+0x80>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a19      	ldr	r2, [pc, #100]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_GPIO_Init+0x80>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <MX_GPIO_Init+0x80>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Switch0_Pin Switch1_Pin */
  GPIO_InitStruct.Pin = Switch0_Pin|Switch1_Pin;
 8000552:	2303      	movs	r3, #3
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f001 fb22 	bl	8001bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sawL, 128, DAC_ALIGN_8B_R);
 8000580:	2308      	movs	r3, #8
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2380      	movs	r3, #128	@ 0x80
 8000586:	4a3b      	ldr	r2, [pc, #236]	@ (8000674 <StartDefaultTask+0xfc>)
 8000588:	2100      	movs	r1, #0
 800058a:	483b      	ldr	r0, [pc, #236]	@ (8000678 <StartDefaultTask+0x100>)
 800058c:	f000 ff66 	bl	800145c <HAL_DAC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {
	  // timer set to count to 80 with 8Mhz ref means 1k
	  const uint16_t ARR[]={
 8000590:	4a3a      	ldr	r2, [pc, #232]	@ (800067c <StartDefaultTask+0x104>)
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059a:	6018      	str	r0, [r3, #0]
 800059c:	3304      	adds	r3, #4
 800059e:	8019      	strh	r1, [r3, #0]
			  5, // C4
			  10, // D4
			  15   // E4
	  };
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80005a0:	2101      	movs	r1, #1
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a6:	f001 fc75 	bl	8001e94 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d120      	bne.n	80005f2 <StartDefaultTask+0x7a>
		  select=0;
 80005b0:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <StartDefaultTask+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
		  if(playing == 0){
 80005b6:	4b33      	ldr	r3, [pc, #204]	@ (8000684 <StartDefaultTask+0x10c>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d116      	bne.n	80005ec <StartDefaultTask+0x74>
			  HAL_TIM_Base_Start(&htim2);
 80005be:	4832      	ldr	r0, [pc, #200]	@ (8000688 <StartDefaultTask+0x110>)
 80005c0:	f003 fd04 	bl	8003fcc <HAL_TIM_Base_Start>
			  __HAL_TIM_SET_AUTORELOAD(&htim2, ARR[select]);
 80005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <StartDefaultTask+0x108>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	3310      	adds	r3, #16
 80005cc:	443b      	add	r3, r7
 80005ce:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80005d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <StartDefaultTask+0x110>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <StartDefaultTask+0x108>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	3310      	adds	r3, #16
 80005e0:	443b      	add	r3, r7
 80005e2:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <StartDefaultTask+0x110>)
 80005ea:	60da      	str	r2, [r3, #12]
		  }
		  playing=1;
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <StartDefaultTask+0x10c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
	  }
	  if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 80005f2:	2102      	movs	r1, #2
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f001 fc4c 	bl	8001e94 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d121      	bne.n	8000646 <StartDefaultTask+0xce>
		  select=1;
 8000602:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <StartDefaultTask+0x108>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
		  if(playing == 0){
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <StartDefaultTask+0x10c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d116      	bne.n	800063e <StartDefaultTask+0xc6>
			  HAL_TIM_Base_Start(&htim2);
 8000610:	481d      	ldr	r0, [pc, #116]	@ (8000688 <StartDefaultTask+0x110>)
 8000612:	f003 fcdb 	bl	8003fcc <HAL_TIM_Base_Start>
			  __HAL_TIM_SET_AUTORELOAD(&htim2, ARR[select]);
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <StartDefaultTask+0x108>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	3310      	adds	r3, #16
 800061e:	443b      	add	r3, r7
 8000620:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8000624:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <StartDefaultTask+0x110>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <StartDefaultTask+0x108>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	3310      	adds	r3, #16
 8000632:	443b      	add	r3, r7
 8000634:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000638:	461a      	mov	r2, r3
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <StartDefaultTask+0x110>)
 800063c:	60da      	str	r2, [r3, #12]
		  }
		  playing=1;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <StartDefaultTask+0x10c>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e005      	b.n	8000652 <StartDefaultTask+0xda>
	  }
	  else{
		  select=4;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <StartDefaultTask+0x108>)
 8000648:	2204      	movs	r2, #4
 800064a:	701a      	strb	r2, [r3, #0]
		  playing=0;
 800064c:	4b0d      	ldr	r3, [pc, #52]	@ (8000684 <StartDefaultTask+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	  }

	  if(playing == 1){
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <StartDefaultTask+0x10c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d104      	bne.n	8000664 <StartDefaultTask+0xec>
		  HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 800065a:	2101      	movs	r1, #1
 800065c:	480a      	ldr	r0, [pc, #40]	@ (8000688 <StartDefaultTask+0x110>)
 800065e:	f003 fe8f 	bl	8004380 <HAL_TIM_GenerateEvent>
 8000662:	e002      	b.n	800066a <StartDefaultTask+0xf2>
	  }
	  else{
		  HAL_TIM_Base_Stop(&htim2);
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <StartDefaultTask+0x110>)
 8000666:	f003 fd05 	bl	8004074 <HAL_TIM_Base_Stop>
	  }
    osDelay(10);
 800066a:	200a      	movs	r0, #10
 800066c:	f004 fdfc 	bl	8005268 <osDelay>
  {
 8000670:	e78e      	b.n	8000590 <StartDefaultTask+0x18>
 8000672:	bf00      	nop
 8000674:	08007e54 	.word	0x08007e54
 8000678:	20000088 	.word	0x20000088
 800067c:	08007db0 	.word	0x08007db0
 8000680:	20000000 	.word	0x20000000
 8000684:	20000210 	.word	0x20000210
 8000688:	20000134 	.word	0x20000134

0800068c <StartScreenUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartScreenUpdate */
void StartScreenUpdate(void *argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartScreenUpdate */
	ssd1306_Init();
 8000694:	f000 f8d4 	bl	8000840 <ssd1306_Init>
	char text[20] = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	ssd1306_SetCursor(1, 1);
 80006a8:	2101      	movs	r1, #1
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 fa80 	bl	8000bb0 <ssd1306_SetCursor>
	ssd1306_WriteString("Playing:", Font_7x10, White);
 80006b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000770 <StartScreenUpdate+0xe4>)
 80006b2:	2301      	movs	r3, #1
 80006b4:	ca06      	ldmia	r2, {r1, r2}
 80006b6:	482f      	ldr	r0, [pc, #188]	@ (8000774 <StartScreenUpdate+0xe8>)
 80006b8:	f000 fa54 	bl	8000b64 <ssd1306_WriteString>
	ssd1306_SetCursor(1, 12);
 80006bc:	210c      	movs	r1, #12
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 fa76 	bl	8000bb0 <ssd1306_SetCursor>
	ssd1306_WriteString("Selected:", Font_7x10, White);
 80006c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <StartScreenUpdate+0xe4>)
 80006c6:	2301      	movs	r3, #1
 80006c8:	ca06      	ldmia	r2, {r1, r2}
 80006ca:	482b      	ldr	r0, [pc, #172]	@ (8000778 <StartScreenUpdate+0xec>)
 80006cc:	f000 fa4a 	bl	8000b64 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006d0:	f000 f944 	bl	800095c <ssd1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {
	  ssd1306_SetCursor(77, 1);
 80006d4:	2101      	movs	r1, #1
 80006d6:	204d      	movs	r0, #77	@ 0x4d
 80006d8:	f000 fa6a 	bl	8000bb0 <ssd1306_SetCursor>
	  if(playing){
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <StartScreenUpdate+0xf0>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d006      	beq.n	80006f2 <StartScreenUpdate+0x66>
		  ssd1306_WriteString("True", Font_7x10, White);
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <StartScreenUpdate+0xe4>)
 80006e6:	2301      	movs	r3, #1
 80006e8:	ca06      	ldmia	r2, {r1, r2}
 80006ea:	4825      	ldr	r0, [pc, #148]	@ (8000780 <StartScreenUpdate+0xf4>)
 80006ec:	f000 fa3a 	bl	8000b64 <ssd1306_WriteString>
 80006f0:	e005      	b.n	80006fe <StartScreenUpdate+0x72>
	  }
	  else{
		  ssd1306_WriteString("False", Font_7x10, White);
 80006f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000770 <StartScreenUpdate+0xe4>)
 80006f4:	2301      	movs	r3, #1
 80006f6:	ca06      	ldmia	r2, {r1, r2}
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <StartScreenUpdate+0xf8>)
 80006fa:	f000 fa33 	bl	8000b64 <ssd1306_WriteString>
	  }
	  ssd1306_SetCursor(77, 12);
 80006fe:	210c      	movs	r1, #12
 8000700:	204d      	movs	r0, #77	@ 0x4d
 8000702:	f000 fa55 	bl	8000bb0 <ssd1306_SetCursor>

	  switch(select){
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <StartScreenUpdate+0xfc>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b03      	cmp	r3, #3
 800070c:	d014      	beq.n	8000738 <StartScreenUpdate+0xac>
 800070e:	2b03      	cmp	r3, #3
 8000710:	dc19      	bgt.n	8000746 <StartScreenUpdate+0xba>
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <StartScreenUpdate+0x90>
 8000716:	2b01      	cmp	r3, #1
 8000718:	d007      	beq.n	800072a <StartScreenUpdate+0x9e>
 800071a:	e014      	b.n	8000746 <StartScreenUpdate+0xba>
	  case 0:
		  ssd1306_WriteString("0", Font_7x10, White);
 800071c:	4a14      	ldr	r2, [pc, #80]	@ (8000770 <StartScreenUpdate+0xe4>)
 800071e:	2301      	movs	r3, #1
 8000720:	ca06      	ldmia	r2, {r1, r2}
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <StartScreenUpdate+0x100>)
 8000724:	f000 fa1e 	bl	8000b64 <ssd1306_WriteString>
		  break;
 8000728:	e013      	b.n	8000752 <StartScreenUpdate+0xc6>
	  case 1:
		  ssd1306_WriteString("1", Font_7x10, White);
 800072a:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <StartScreenUpdate+0xe4>)
 800072c:	2301      	movs	r3, #1
 800072e:	ca06      	ldmia	r2, {r1, r2}
 8000730:	4817      	ldr	r0, [pc, #92]	@ (8000790 <StartScreenUpdate+0x104>)
 8000732:	f000 fa17 	bl	8000b64 <ssd1306_WriteString>
		  break;
 8000736:	e00c      	b.n	8000752 <StartScreenUpdate+0xc6>
	  case 3:
		  ssd1306_WriteString("2", Font_7x10, White);
 8000738:	4a0d      	ldr	r2, [pc, #52]	@ (8000770 <StartScreenUpdate+0xe4>)
 800073a:	2301      	movs	r3, #1
 800073c:	ca06      	ldmia	r2, {r1, r2}
 800073e:	4815      	ldr	r0, [pc, #84]	@ (8000794 <StartScreenUpdate+0x108>)
 8000740:	f000 fa10 	bl	8000b64 <ssd1306_WriteString>
		  break;
 8000744:	e005      	b.n	8000752 <StartScreenUpdate+0xc6>
	  default:
		  ssd1306_WriteString("None", Font_7x10, White);
 8000746:	4a0a      	ldr	r2, [pc, #40]	@ (8000770 <StartScreenUpdate+0xe4>)
 8000748:	2301      	movs	r3, #1
 800074a:	ca06      	ldmia	r2, {r1, r2}
 800074c:	4812      	ldr	r0, [pc, #72]	@ (8000798 <StartScreenUpdate+0x10c>)
 800074e:	f000 fa09 	bl	8000b64 <ssd1306_WriteString>
	  }

	  ssd1306_UpdateScreen();
 8000752:	f000 f903 	bl	800095c <ssd1306_UpdateScreen>
	  ssd1306_FillRectangle(70, 1, 112, 19, Black);
 8000756:	2300      	movs	r3, #0
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2313      	movs	r3, #19
 800075c:	2270      	movs	r2, #112	@ 0x70
 800075e:	2101      	movs	r1, #1
 8000760:	2046      	movs	r0, #70	@ 0x46
 8000762:	f000 fa3d 	bl	8000be0 <ssd1306_FillRectangle>
	  osDelay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f004 fd7e 	bl	8005268 <osDelay>
	  ssd1306_SetCursor(77, 1);
 800076c:	e7b2      	b.n	80006d4 <StartScreenUpdate+0x48>
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004
 8000774:	08007db8 	.word	0x08007db8
 8000778:	08007dc4 	.word	0x08007dc4
 800077c:	20000210 	.word	0x20000210
 8000780:	08007dd0 	.word	0x08007dd0
 8000784:	08007dd8 	.word	0x08007dd8
 8000788:	20000000 	.word	0x20000000
 800078c:	08007de0 	.word	0x08007de0
 8000790:	08007de4 	.word	0x08007de4
 8000794:	08007de8 	.word	0x08007de8
 8000798:	08007dec 	.word	0x08007dec

0800079c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d101      	bne.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007ae:	f000 fce5 	bl	800117c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40001000 	.word	0x40001000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af04      	add	r7, sp, #16
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	2200      	movs	r2, #0
 80007f8:	2178      	movs	r1, #120	@ 0x78
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <ssd1306_WriteCommand+0x2c>)
 80007fc:	f001 fbfe 	bl	8001ffc <HAL_I2C_Mem_Write>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000e0 	.word	0x200000e0

0800080c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af04      	add	r7, sp, #16
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b29b      	uxth	r3, r3
 800081a:	f04f 32ff 	mov.w	r2, #4294967295
 800081e:	9202      	str	r2, [sp, #8]
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2240      	movs	r2, #64	@ 0x40
 800082a:	2178      	movs	r1, #120	@ 0x78
 800082c:	4803      	ldr	r0, [pc, #12]	@ (800083c <ssd1306_WriteData+0x30>)
 800082e:	f001 fbe5 	bl	8001ffc <HAL_I2C_Mem_Write>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000e0 	.word	0x200000e0

08000840 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000844:	f7ff ffc2 	bl	80007cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000848:	2064      	movs	r0, #100	@ 0x64
 800084a:	f000 fcb7 	bl	80011bc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fa28 	bl	8000ca4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000854:	2020      	movs	r0, #32
 8000856:	f7ff ffc1 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff ffbe 	bl	80007dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000860:	20b0      	movs	r0, #176	@ 0xb0
 8000862:	f7ff ffbb 	bl	80007dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000866:	20c8      	movs	r0, #200	@ 0xc8
 8000868:	f7ff ffb8 	bl	80007dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ffb5 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000872:	2010      	movs	r0, #16
 8000874:	f7ff ffb2 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000878:	2040      	movs	r0, #64	@ 0x40
 800087a:	f7ff ffaf 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800087e:	20ff      	movs	r0, #255	@ 0xff
 8000880:	f000 f9fc 	bl	8000c7c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000884:	20a1      	movs	r0, #161	@ 0xa1
 8000886:	f7ff ffa9 	bl	80007dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800088a:	20a6      	movs	r0, #166	@ 0xa6
 800088c:	f7ff ffa6 	bl	80007dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000890:	20a8      	movs	r0, #168	@ 0xa8
 8000892:	f7ff ffa3 	bl	80007dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000896:	203f      	movs	r0, #63	@ 0x3f
 8000898:	f7ff ffa0 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800089c:	20a4      	movs	r0, #164	@ 0xa4
 800089e:	f7ff ff9d 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008a2:	20d3      	movs	r0, #211	@ 0xd3
 80008a4:	f7ff ff9a 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ff97 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008ae:	20d5      	movs	r0, #213	@ 0xd5
 80008b0:	f7ff ff94 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008b4:	20f0      	movs	r0, #240	@ 0xf0
 80008b6:	f7ff ff91 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008ba:	20d9      	movs	r0, #217	@ 0xd9
 80008bc:	f7ff ff8e 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008c0:	2022      	movs	r0, #34	@ 0x22
 80008c2:	f7ff ff8b 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008c6:	20da      	movs	r0, #218	@ 0xda
 80008c8:	f7ff ff88 	bl	80007dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008cc:	2012      	movs	r0, #18
 80008ce:	f7ff ff85 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008d2:	20db      	movs	r0, #219	@ 0xdb
 80008d4:	f7ff ff82 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008d8:	2020      	movs	r0, #32
 80008da:	f7ff ff7f 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008de:	208d      	movs	r0, #141	@ 0x8d
 80008e0:	f7ff ff7c 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008e4:	2014      	movs	r0, #20
 80008e6:	f7ff ff79 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f9da 	bl	8000ca4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 f80f 	bl	8000914 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008f6:	f000 f831 	bl	800095c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <ssd1306_Init+0xd0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <ssd1306_Init+0xd0>)
 8000902:	2200      	movs	r2, #0
 8000904:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000906:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <ssd1306_Init+0xd0>)
 8000908:	2201      	movs	r2, #1
 800090a:	711a      	strb	r2, [r3, #4]
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000614 	.word	0x20000614

08000914 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e00d      	b.n	8000940 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <ssd1306_Fill+0x1a>
 800092a:	2100      	movs	r1, #0
 800092c:	e000      	b.n	8000930 <ssd1306_Fill+0x1c>
 800092e:	21ff      	movs	r1, #255	@ 0xff
 8000930:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <ssd1306_Fill+0x44>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000946:	d3ed      	bcc.n	8000924 <ssd1306_Fill+0x10>
    }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000214 	.word	0x20000214

0800095c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e016      	b.n	8000996 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	3b50      	subs	r3, #80	@ 0x50
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff34 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff31 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800097a:	2010      	movs	r0, #16
 800097c:	f7ff ff2e 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	01db      	lsls	r3, r3, #7
 8000984:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <ssd1306_UpdateScreen+0x4c>)
 8000986:	4413      	add	r3, r2
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff3e 	bl	800080c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	3301      	adds	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d9e5      	bls.n	8000968 <ssd1306_UpdateScreen+0xc>
    }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000214 	.word	0x20000214

080009ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	460b      	mov	r3, r1
 80009b8:	71bb      	strb	r3, [r7, #6]
 80009ba:	4613      	mov	r3, r2
 80009bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db3d      	blt.n	8000a42 <ssd1306_DrawPixel+0x96>
 80009c6:	79bb      	ldrb	r3, [r7, #6]
 80009c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ca:	d83a      	bhi.n	8000a42 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d11a      	bne.n	8000a08 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	b2d8      	uxtb	r0, r3
 80009da:	4603      	mov	r3, r0
 80009dc:	01db      	lsls	r3, r3, #7
 80009de:	4413      	add	r3, r2
 80009e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <ssd1306_DrawPixel+0xa4>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	b25a      	sxtb	r2, r3
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b259      	sxtb	r1, r3
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	4603      	mov	r3, r0
 80009fc:	01db      	lsls	r3, r3, #7
 80009fe:	4413      	add	r3, r2
 8000a00:	b2c9      	uxtb	r1, r1
 8000a02:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <ssd1306_DrawPixel+0xa4>)
 8000a04:	54d1      	strb	r1, [r2, r3]
 8000a06:	e01d      	b.n	8000a44 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	b2d8      	uxtb	r0, r3
 8000a10:	4603      	mov	r3, r0
 8000a12:	01db      	lsls	r3, r3, #7
 8000a14:	4413      	add	r3, r2
 8000a16:	4a0e      	ldr	r2, [pc, #56]	@ (8000a50 <ssd1306_DrawPixel+0xa4>)
 8000a18:	5cd3      	ldrb	r3, [r2, r3]
 8000a1a:	b25a      	sxtb	r2, r3
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f303 	lsl.w	r3, r1, r3
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b259      	sxtb	r1, r3
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	4603      	mov	r3, r0
 8000a36:	01db      	lsls	r3, r3, #7
 8000a38:	4413      	add	r3, r2
 8000a3a:	b2c9      	uxtb	r1, r1
 8000a3c:	4a04      	ldr	r2, [pc, #16]	@ (8000a50 <ssd1306_DrawPixel+0xa4>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
 8000a40:	e000      	b.n	8000a44 <ssd1306_DrawPixel+0x98>
        return;
 8000a42:	bf00      	nop
    }
}
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000214 	.word	0x20000214

08000a54 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	1d38      	adds	r0, r7, #4
 8000a5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a62:	461a      	mov	r2, r3
 8000a64:	4623      	mov	r3, r4
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b1f      	cmp	r3, #31
 8000a70:	d902      	bls.n	8000a78 <ssd1306_WriteChar+0x24>
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a76:	d901      	bls.n	8000a7c <ssd1306_WriteChar+0x28>
        return 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e06c      	b.n	8000b56 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a7c:	4b38      	ldr	r3, [pc, #224]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	793b      	ldrb	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	2b80      	cmp	r3, #128	@ 0x80
 8000a88:	dc06      	bgt.n	8000a98 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a8a:	4b35      	ldr	r3, [pc, #212]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000a8c:	885b      	ldrh	r3, [r3, #2]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a94:	2b40      	cmp	r3, #64	@ 0x40
 8000a96:	dd01      	ble.n	8000a9c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e05c      	b.n	8000b56 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
 8000aa0:	e04c      	b.n	8000b3c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	3b20      	subs	r3, #32
 8000aa8:	7979      	ldrb	r1, [r7, #5]
 8000aaa:	fb01 f303 	mul.w	r3, r1, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	440b      	add	r3, r1
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
 8000ac0:	e034      	b.n	8000b2c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d012      	beq.n	8000af8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b2d8      	uxtb	r0, r3
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000ae2:	885b      	ldrh	r3, [r3, #2]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	7bba      	ldrb	r2, [r7, #14]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f7ff ff5b 	bl	80009ac <ssd1306_DrawPixel>
 8000af6:	e016      	b.n	8000b26 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000af8:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d8      	uxtb	r0, r3
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000b08:	885b      	ldrh	r3, [r3, #2]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4413      	add	r3, r2
 8000b12:	b2d9      	uxtb	r1, r3
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	f7ff ff43 	bl	80009ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	793b      	ldrb	r3, [r7, #4]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d3c5      	bcc.n	8000ac2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d3ad      	bcc.n	8000aa2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	793a      	ldrb	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <ssd1306_WriteChar+0x10c>)
 8000b52:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	@ 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000614 	.word	0x20000614

08000b64 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	1d38      	adds	r0, r7, #4
 8000b6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b72:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000b74:	e012      	b.n	8000b9c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	7818      	ldrb	r0, [r3, #0]
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	1d3a      	adds	r2, r7, #4
 8000b7e:	ca06      	ldmia	r2, {r1, r2}
 8000b80:	f7ff ff68 	bl	8000a54 <ssd1306_WriteChar>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d002      	beq.n	8000b96 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	e008      	b.n	8000ba8 <ssd1306_WriteString+0x44>
        }
        str++;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1e8      	bne.n	8000b76 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <ssd1306_SetCursor+0x2c>)
 8000bc6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	@ (8000bdc <ssd1306_SetCursor+0x2c>)
 8000bce:	805a      	strh	r2, [r3, #2]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000614 	.word	0x20000614

08000be0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4604      	mov	r4, r0
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4623      	mov	r3, r4
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	717b      	strb	r3, [r7, #5]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	4293      	cmp	r3, r2
 8000c04:	bf28      	it	cs
 8000c06:	4613      	movcs	r3, r2
 8000c08:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000c0a:	797a      	ldrb	r2, [r7, #5]
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	bf38      	it	cc
 8000c12:	4613      	movcc	r3, r2
 8000c14:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	bf28      	it	cs
 8000c1e:	4613      	movcs	r3, r2
 8000c20:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000c22:	793a      	ldrb	r2, [r7, #4]
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	4293      	cmp	r3, r2
 8000c28:	bf38      	it	cc
 8000c2a:	4613      	movcc	r3, r2
 8000c2c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000c2e:	7afb      	ldrb	r3, [r7, #11]
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e017      	b.n	8000c64 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000c34:	7b7b      	ldrb	r3, [r7, #13]
 8000c36:	73bb      	strb	r3, [r7, #14]
 8000c38:	e009      	b.n	8000c4e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000c3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c3e:	7bf9      	ldrb	r1, [r7, #15]
 8000c40:	7bbb      	ldrb	r3, [r7, #14]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff feb2 	bl	80009ac <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	73bb      	strb	r3, [r7, #14]
 8000c4e:	7bba      	ldrb	r2, [r7, #14]
 8000c50:	7b3b      	ldrb	r3, [r7, #12]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d803      	bhi.n	8000c5e <ssd1306_FillRectangle+0x7e>
 8000c56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	daed      	bge.n	8000c3a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	3301      	adds	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	7bfa      	ldrb	r2, [r7, #15]
 8000c66:	7abb      	ldrb	r3, [r7, #10]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d803      	bhi.n	8000c74 <ssd1306_FillRectangle+0x94>
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c70:	d9e0      	bls.n	8000c34 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000c72:	bf00      	nop
 8000c74:	bf00      	nop
}
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}

08000c7c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c86:	2381      	movs	r3, #129	@ 0x81
 8000c88:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fda5 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fda1 	bl	80007dc <ssd1306_WriteCommand>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d005      	beq.n	8000cc0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000cb4:	23af      	movs	r3, #175	@ 0xaf
 8000cb6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <ssd1306_SetDisplayOn+0x38>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	715a      	strb	r2, [r3, #5]
 8000cbe:	e004      	b.n	8000cca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000cc0:	23ae      	movs	r3, #174	@ 0xae
 8000cc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <ssd1306_SetDisplayOn+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fd85 	bl	80007dc <ssd1306_WriteCommand>
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000614 	.word	0x20000614

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fb29 	bl	8001374 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8000e0c <HAL_DAC_MspInit+0xdc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d158      	bne.n	8000e04 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d52:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a2e      	ldr	r2, [pc, #184]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <HAL_DAC_MspInit+0xe0>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d82:	2310      	movs	r3, #16
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d86:	2303      	movs	r3, #3
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f000 ff0a 	bl	8001bb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000e18 <HAL_DAC_MspInit+0xe8>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db4:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000dce:	f000 fd57 	bl	8001880 <HAL_DMA_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 8000dd8:	f7ff fcf2 	bl	80007c0 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <HAL_DAC_MspInit+0xec>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <HAL_DAC_MspInit+0xec>)
 8000de2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000de6:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_DAC_MspInit+0xe4>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 5, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2105      	movs	r1, #5
 8000df8:	2036      	movs	r0, #54	@ 0x36
 8000dfa:	f000 fabb 	bl	8001374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000dfe:	2036      	movs	r0, #54	@ 0x36
 8000e00:	f000 fad4 	bl	80013ac <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40007400 	.word	0x40007400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	2000009c 	.word	0x2000009c
 8000e18:	40020030 	.word	0x40020030
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_I2C_MspInit+0x7c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d127      	bne.n	8000e92 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a16      	ldr	r2, [pc, #88]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6153      	str	r3, [r2, #20]
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23c0      	movs	r3, #192	@ 0xc0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	@ (8000ea4 <HAL_I2C_MspInit+0x84>)
 8000e76:	f000 fe9b 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x38>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x38>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x38>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <HAL_UART_MspInit+0x80>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d129      	bne.n	8000f5a <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_UART_MspInit+0x84>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f36:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f000 fe2b 	bl	8001bb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004400 	.word	0x40004400
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	@ 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f7c:	4b33      	ldr	r3, [pc, #204]	@ (800104c <HAL_InitTick+0xe0>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a32      	ldr	r2, [pc, #200]	@ (800104c <HAL_InitTick+0xe0>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	61d3      	str	r3, [r2, #28]
 8000f88:	4b30      	ldr	r3, [pc, #192]	@ (800104c <HAL_InitTick+0xe0>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f94:	f107 0210 	add.w	r2, r7, #16
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 fe66 	bl	8003c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fae:	f002 fe1b 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8000fb2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fb6:	f002 fe17 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc2:	4a23      	ldr	r2, [pc, #140]	@ (8001050 <HAL_InitTick+0xe4>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <HAL_InitTick+0xe8>)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <HAL_InitTick+0xec>)
 8000fd2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_InitTick+0xe8>)
 8000fd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <HAL_InitTick+0xe8>)
 8000fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_InitTick+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <HAL_InitTick+0xe8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_InitTick+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ff4:	4817      	ldr	r0, [pc, #92]	@ (8001054 <HAL_InitTick+0xe8>)
 8000ff6:	f002 ff91 	bl	8003f1c <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001000:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001004:	2b00      	cmp	r3, #0
 8001006:	d11b      	bne.n	8001040 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001008:	4812      	ldr	r0, [pc, #72]	@ (8001054 <HAL_InitTick+0xe8>)
 800100a:	f003 f85b 	bl	80040c4 <HAL_TIM_Base_Start_IT>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001014:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001018:	2b00      	cmp	r3, #0
 800101a:	d111      	bne.n	8001040 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800101c:	2036      	movs	r0, #54	@ 0x36
 800101e:	f000 f9c5 	bl	80013ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d808      	bhi.n	800103a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	2036      	movs	r0, #54	@ 0x36
 800102e:	f000 f9a1 	bl	8001374 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <HAL_InitTick+0xf0>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e002      	b.n	8001040 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001040:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001044:	4618      	mov	r0, r3
 8001046:	3738      	adds	r7, #56	@ 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	431bde83 	.word	0x431bde83
 8001054:	2000061c 	.word	0x2000061c
 8001058:	40001000 	.word	0x40001000
 800105c:	20000010 	.word	0x20000010

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel3_IRQHandler+0x10>)
 800109e:	f000 fc95 	bl	80019cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000009c 	.word	0x2000009c

080010ac <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  if (htim6.Instance != NULL)
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <TIM6_DAC1_IRQHandler+0x24>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <TIM6_DAC1_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim6);
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <TIM6_DAC1_IRQHandler+0x24>)
 80010ba:	f003 f85f 	bl	800417c <HAL_TIM_IRQHandler>
  }
  if (hdac1.Instance != NULL)
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <TIM6_DAC1_IRQHandler+0x28>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <TIM6_DAC1_IRQHandler+0x20>
  {
    HAL_DAC_IRQHandler(&hdac1);
 80010c6:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <TIM6_DAC1_IRQHandler+0x28>)
 80010c8:	f000 fa84 	bl	80015d4 <HAL_DAC_IRQHandler>
  }
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000061c 	.word	0x2000061c
 80010d4:	20000088 	.word	0x20000088

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001134 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ffea 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <LoopForever+0x6>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	@ (800113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <LoopForever+0xe>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	@ (8001148 <LoopForever+0x16>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f006 fd9d 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112e:	f7ff f84f 	bl	80001d0 <main>

08001132 <LoopForever>:

LoopForever:
    b LoopForever
 8001132:	e7fe      	b.n	8001132 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001134:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001140:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8001144:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001148:	2000218c 	.word	0x2000218c

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>
	...

08001150 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_Init+0x28>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_Init+0x28>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f8fc 	bl	800135e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	2005      	movs	r0, #5
 8001168:	f7ff ff00 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fdb8 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000014 	.word	0x20000014
 80011a0:	20000668 	.word	0x20000668

080011a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000668 	.word	0x20000668

080011bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000014 	.word	0x20000014

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff4c 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001386:	f7ff ff61 	bl	800124c <__NVIC_GetPriorityGrouping>
 800138a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	68b9      	ldr	r1, [r7, #8]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff ffb1 	bl	80012f8 <NVIC_EncodePriority>
 8001396:	4602      	mov	r2, r0
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff80 	bl	80012a4 <__NVIC_SetPriority>
}
 80013a4:	bf00      	nop
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff54 	bl	8001268 <__NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e014      	b.n	8001404 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d105      	bne.n	80013f0 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fca0 	bl	8000d30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	795b      	ldrb	r3, [r3, #5]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_DAC_Start_DMA+0x1e>
 8001476:	2302      	movs	r3, #2
 8001478:	e09b      	b.n	80015b2 <HAL_DAC_Start_DMA+0x156>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2202      	movs	r2, #2
 8001484:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d12f      	bne.n	80014ec <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a4a      	ldr	r2, [pc, #296]	@ (80015bc <HAL_DAC_Start_DMA+0x160>)
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a49      	ldr	r2, [pc, #292]	@ (80015c0 <HAL_DAC_Start_DMA+0x164>)
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a48      	ldr	r2, [pc, #288]	@ (80015c4 <HAL_DAC_Start_DMA+0x168>)
 80014a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d013      	beq.n	80014e2 <HAL_DAC_Start_DMA+0x86>
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d845      	bhi.n	800154c <HAL_DAC_Start_DMA+0xf0>
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_DAC_Start_DMA+0x72>
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d005      	beq.n	80014d8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80014cc:	e03e      	b.n	800154c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3308      	adds	r3, #8
 80014d4:	617b      	str	r3, [r7, #20]
        break;
 80014d6:	e03c      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	330c      	adds	r3, #12
 80014de:	617b      	str	r3, [r7, #20]
        break;
 80014e0:	e037      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3310      	adds	r3, #16
 80014e8:	617b      	str	r3, [r7, #20]
        break;
 80014ea:	e032      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a35      	ldr	r2, [pc, #212]	@ (80015c8 <HAL_DAC_Start_DMA+0x16c>)
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a34      	ldr	r2, [pc, #208]	@ (80015cc <HAL_DAC_Start_DMA+0x170>)
 80014fa:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a33      	ldr	r2, [pc, #204]	@ (80015d0 <HAL_DAC_Start_DMA+0x174>)
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001512:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	2b08      	cmp	r3, #8
 8001518:	d013      	beq.n	8001542 <HAL_DAC_Start_DMA+0xe6>
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d817      	bhi.n	8001550 <HAL_DAC_Start_DMA+0xf4>
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_DAC_Start_DMA+0xd2>
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800152c:	e010      	b.n	8001550 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3314      	adds	r3, #20
 8001534:	617b      	str	r3, [r7, #20]
        break;
 8001536:	e00c      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3318      	adds	r3, #24
 800153e:	617b      	str	r3, [r7, #20]
        break;
 8001540:	e007      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	331c      	adds	r3, #28
 8001548:	617b      	str	r3, [r7, #20]
        break;
 800154a:	e002      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001550:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001566:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	f000 f9cc 	bl	800190e <HAL_DMA_Start_IT>
 8001576:	e00e      	b.n	8001596 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001586:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68d8      	ldr	r0, [r3, #12]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f000 f9bc 	bl	800190e <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080017a9 	.word	0x080017a9
 80015c0:	080017cb 	.word	0x080017cb
 80015c4:	080017e7 	.word	0x080017e7
 80015c8:	08001815 	.word	0x08001815
 80015cc:	08001837 	.word	0x08001837
 80015d0:	08001853 	.word	0x08001853

080015d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ea:	d120      	bne.n	800162e <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015fa:	d118      	bne.n	800162e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001616:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001626:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff0d 	bl	8001448 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800163c:	d120      	bne.n	8001680 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800164c:	d118      	bne.n	8001680 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2204      	movs	r2, #4
 8001652:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f043 0202 	orr.w	r2, r3, #2
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001668:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001678:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f88a 	bl	8001794 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	795b      	ldrb	r3, [r3, #5]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_DAC_ConfigChannel+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e04e      	b.n	8001746 <HAL_DAC_ConfigChannel+0xbe>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2202      	movs	r2, #2
 80016b2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a24      	ldr	r2, [pc, #144]	@ (8001754 <HAL_DAC_ConfigChannel+0xcc>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d112      	bne.n	80016ec <HAL_DAC_ConfigChannel+0x64>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80016cc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4013      	ands	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e00e      	b.n	800170a <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80016ec:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4013      	ands	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	22c0      	movs	r2, #192	@ 0xc0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40007400 	.word	0x40007400

08001758 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff fe28 	bl	800140c <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2201      	movs	r2, #1
 80017c0:	711a      	strb	r2, [r3, #4]
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f7ff fe21 	bl	8001420 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	f043 0204 	orr.w	r2, r3, #4
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f7ff fe17 	bl	8001434 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	711a      	strb	r2, [r3, #4]
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff ff98 	bl	8001758 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	711a      	strb	r2, [r3, #4]
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff ff91 	bl	800176c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f043 0204 	orr.w	r2, r3, #4
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f7ff ff87 	bl	8001780 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	711a      	strb	r2, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e037      	b.n	8001906 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018b0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f941 	bl	8001b70 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_DMA_Start_IT+0x20>
 800192a:	2302      	movs	r3, #2
 800192c:	e04a      	b.n	80019c4 <HAL_DMA_Start_IT+0xb6>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800193c:	2b01      	cmp	r3, #1
 800193e:	d13a      	bne.n	80019b6 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f8d4 	bl	8001b12 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 020e 	orr.w	r2, r2, #14
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e00f      	b.n	80019a4 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 020a 	orr.w	r2, r2, #10
 8001992:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e005      	b.n	80019c2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019be:	2302      	movs	r3, #2
 80019c0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	2204      	movs	r2, #4
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d024      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x72>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01f      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0204 	bic.w	r2, r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a24:	2104      	movs	r1, #4
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06a      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a3c:	e065      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	2202      	movs	r2, #2
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02c      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xdc>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d027      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 020a 	bic.w	r2, r2, #10
 8001a74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a86:	2102      	movs	r1, #2
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d035      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001aa6:	e030      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	2208      	movs	r2, #8
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d028      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 020e 	bic.w	r2, r2, #14
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
    }
  }
}
 8001b08:	e7ff      	b.n	8001b0a <HAL_DMA_IRQHandler+0x13e>
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d108      	bne.n	8001b52 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b50:	e007      	b.n	8001b62 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	60da      	str	r2, [r3, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <DMA_CalcBaseAndBitshift+0x34>)
 8001b80:	4413      	add	r3, r2
 8001b82:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <DMA_CalcBaseAndBitshift+0x38>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	009a      	lsls	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <DMA_CalcBaseAndBitshift+0x3c>)
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	bffdfff8 	.word	0xbffdfff8
 8001ba8:	cccccccd 	.word	0xcccccccd
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbe:	e14e      	b.n	8001e5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8140 	beq.w	8001e58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d005      	beq.n	8001bf0 <HAL_GPIO_Init+0x40>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d130      	bne.n	8001c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c26:	2201      	movs	r2, #1
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	f003 0201 	and.w	r2, r3, #1
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d017      	beq.n	8001c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d123      	bne.n	8001ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	220f      	movs	r2, #15
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3208      	adds	r2, #8
 8001cdc:	6939      	ldr	r1, [r7, #16]
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0203 	and.w	r2, r3, #3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 809a 	beq.w	8001e58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d24:	4b55      	ldr	r3, [pc, #340]	@ (8001e7c <HAL_GPIO_Init+0x2cc>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a54      	ldr	r2, [pc, #336]	@ (8001e7c <HAL_GPIO_Init+0x2cc>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b52      	ldr	r3, [pc, #328]	@ (8001e7c <HAL_GPIO_Init+0x2cc>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d3c:	4a50      	ldr	r2, [pc, #320]	@ (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x1e0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a46      	ldr	r2, [pc, #280]	@ (8001e84 <HAL_GPIO_Init+0x2d4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x1dc>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a45      	ldr	r2, [pc, #276]	@ (8001e88 <HAL_GPIO_Init+0x2d8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x1d8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a44      	ldr	r2, [pc, #272]	@ (8001e8c <HAL_GPIO_Init+0x2dc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x1d4>
 8001d80:	2303      	movs	r3, #3
 8001d82:	e006      	b.n	8001d92 <HAL_GPIO_Init+0x1e2>
 8001d84:	2305      	movs	r3, #5
 8001d86:	e004      	b.n	8001d92 <HAL_GPIO_Init+0x1e2>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x1e2>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_GPIO_Init+0x1e2>
 8001d90:	2300      	movs	r3, #0
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	f002 0203 	and.w	r2, r2, #3
 8001d98:	0092      	lsls	r2, r2, #2
 8001d9a:	4093      	lsls	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da2:	4937      	ldr	r1, [pc, #220]	@ (8001e80 <HAL_GPIO_Init+0x2d0>)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	3302      	adds	r3, #2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db0:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dfe:	4a24      	ldr	r2, [pc, #144]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e52:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_GPIO_Init+0x2e0>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f47f aea9 	bne.w	8001bc0 <HAL_GPIO_Init+0x10>
  }
}
 8001e6e:	bf00      	nop
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010000 	.word	0x40010000
 8001e84:	48000400 	.word	0x48000400
 8001e88:	48000800 	.word	0x48000800
 8001e8c:	48000c00 	.word	0x48000c00
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e08d      	b.n	8001ff2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe ff98 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	e006      	b.n	8001f4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d108      	bne.n	8001f66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	e007      	b.n	8001f76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69d9      	ldr	r1, [r3, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	f040 80f9 	bne.w	8002216 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_I2C_Mem_Write+0x34>
 800202a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002036:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0ed      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_I2C_Mem_Write+0x4e>
 8002046:	2302      	movs	r3, #2
 8002048:	e0e6      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002052:	f7ff f8a7 	bl	80011a4 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2319      	movs	r3, #25
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f955 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d1      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2221      	movs	r2, #33	@ 0x21
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800209c:	88f8      	ldrh	r0, [r7, #6]
 800209e:	893a      	ldrh	r2, [r7, #8]
 80020a0:	8979      	ldrh	r1, [r7, #10]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4603      	mov	r3, r0
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f8b9 	bl	8002224 <I2C_RequestMemoryWrite>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0a9      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2bff      	cmp	r3, #255	@ 0xff
 80020cc:	d90e      	bls.n	80020ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	22ff      	movs	r2, #255	@ 0xff
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	8979      	ldrh	r1, [r7, #10]
 80020dc:	2300      	movs	r3, #0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 fad9 	bl	800269c <I2C_TransferConfig>
 80020ea:	e00f      	b.n	800210c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	8979      	ldrh	r1, [r7, #10]
 80020fe:	2300      	movs	r3, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fac8 	bl	800269c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f958 	bl	80023c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e07b      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d034      	beq.n	80021c4 <HAL_I2C_Mem_Write+0x1c8>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d130      	bne.n	80021c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	2200      	movs	r2, #0
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f8d1 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04d      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2bff      	cmp	r3, #255	@ 0xff
 8002184:	d90e      	bls.n	80021a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	22ff      	movs	r2, #255	@ 0xff
 800218a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	8979      	ldrh	r1, [r7, #10]
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fa7d 	bl	800269c <I2C_TransferConfig>
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa6c 	bl	800269c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d19e      	bne.n	800210c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f93e 	bl	8002454 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e01a      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_I2C_Mem_Write+0x224>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	fe00e800 	.word	0xfe00e800

08002224 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	817b      	strh	r3, [r7, #10]
 8002236:	460b      	mov	r3, r1
 8002238:	813b      	strh	r3, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <I2C_RequestMemoryWrite+0xa4>)
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fa25 	bl	800269c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8b5 	bl	80023c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e02c      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800226c:	893b      	ldrh	r3, [r7, #8]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28
 8002276:	e015      	b.n	80022a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002278:	893b      	ldrh	r3, [r7, #8]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f89b 	bl	80023c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e012      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f830 	bl	8002314 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	80002000 	.word	0x80002000

080022cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d103      	bne.n	80022ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d007      	beq.n	8002308 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	619a      	str	r2, [r3, #24]
  }
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002324:	e03b      	b.n	800239e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f8d6 	bl	80024dc <I2C_IsErrorOccurred>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e041      	b.n	80023be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d02d      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002342:	f7fe ff2f 	bl	80011a4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d302      	bcc.n	8002358 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d122      	bne.n	800239e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4013      	ands	r3, r2
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	429a      	cmp	r2, r3
 8002374:	d113      	bne.n	800239e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d0b4      	beq.n	8002326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023d2:	e033      	b.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f87f 	bl	80024dc <I2C_IsErrorOccurred>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e031      	b.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d025      	beq.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f0:	f7fe fed8 	bl	80011a4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d302      	bcc.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11a      	bne.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b02      	cmp	r3, #2
 8002412:	d013      	beq.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e007      	b.n	800244c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d1c4      	bne.n	80023d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002460:	e02f      	b.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f838 	bl	80024dc <I2C_IsErrorOccurred>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e02d      	b.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fe95 	bl	80011a4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11a      	bne.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d013      	beq.n	80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e007      	b.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d1c8      	bne.n	8002462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d068      	beq.n	80025da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2210      	movs	r2, #16
 800250e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002510:	e049      	b.n	80025a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d045      	beq.n	80025a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7fe fe43 	bl	80011a4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <I2C_IsErrorOccurred+0x54>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d13a      	bne.n	80025a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800254e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002552:	d121      	bne.n	8002598 <I2C_IsErrorOccurred+0xbc>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800255a:	d01d      	beq.n	8002598 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b20      	cmp	r3, #32
 8002560:	d01a      	beq.n	8002598 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002570:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002572:	f7fe fe17 	bl	80011a4 <HAL_GetTick>
 8002576:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002578:	e00e      	b.n	8002598 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800257a:	f7fe fe13 	bl	80011a4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b19      	cmp	r3, #25
 8002586:	d907      	bls.n	8002598 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f043 0320 	orr.w	r3, r3, #32
 800258e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002596:	e006      	b.n	80025a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d1e9      	bne.n	800257a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d003      	beq.n	80025bc <I2C_IsErrorOccurred+0xe0>
 80025b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0aa      	beq.n	8002512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2220      	movs	r2, #32
 80025ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	f043 0302 	orr.w	r3, r3, #2
 8002636:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fe3b 	bl	80022cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <I2C_IsErrorOccurred+0x1bc>)
 8002662:	400b      	ands	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	431a      	orrs	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800268a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800268e:	4618      	mov	r0, r3
 8002690:	3728      	adds	r7, #40	@ 0x28
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	4613      	mov	r3, r2
 80026ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026b4:	7a7b      	ldrb	r3, [r7, #9]
 80026b6:	041b      	lsls	r3, r3, #16
 80026b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	0d5b      	lsrs	r3, r3, #21
 80026d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <I2C_TransferConfig+0x60>)
 80026dc:	430b      	orrs	r3, r1
 80026de:	43db      	mvns	r3, r3
 80026e0:	ea02 0103 	and.w	r1, r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	03ff63ff 	.word	0x03ff63ff

08002700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	d138      	bne.n	8002788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002720:	2302      	movs	r3, #2
 8002722:	e032      	b.n	800278a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d139      	bne.n	8002820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e033      	b.n	8002822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002836:	af00      	add	r7, sp, #0
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002840:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	f000 bff4 	b.w	800383e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 816d 	beq.w	8002b46 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800286c:	4bb4      	ldr	r3, [pc, #720]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d00c      	beq.n	8002892 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002878:	4bb1      	ldr	r3, [pc, #708]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d157      	bne.n	8002934 <HAL_RCC_OscConfig+0x104>
 8002884:	4bae      	ldr	r3, [pc, #696]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002890:	d150      	bne.n	8002934 <HAL_RCC_OscConfig+0x104>
 8002892:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002896:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80028b2:	d802      	bhi.n	80028ba <HAL_RCC_OscConfig+0x8a>
 80028b4:	4ba2      	ldr	r3, [pc, #648]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0xb6>
 80028ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028be:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028e2:	4b97      	ldr	r3, [pc, #604]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028ea:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80028f2:	fa92 f2a2 	rbit	r2, r2
 80028f6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028fe:	fab2 f282 	clz	r2, r2
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f002 021f 	and.w	r2, r2, #31
 800290e:	2101      	movs	r1, #1
 8002910:	fa01 f202 	lsl.w	r2, r1, r2
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8114 	beq.w	8002b44 <HAL_RCC_OscConfig+0x314>
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 810b 	bne.w	8002b44 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	f000 bf85 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x124>
 8002946:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e036      	b.n	80029c2 <HAL_RCC_OscConfig+0x192>
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x14e>
 8002964:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a75      	ldr	r2, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b73      	ldr	r3, [pc, #460]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a72      	ldr	r2, [pc, #456]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e021      	b.n	80029c2 <HAL_RCC_OscConfig+0x192>
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x17a>
 8002990:	4b6b      	ldr	r3, [pc, #428]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6a      	ldr	r2, [pc, #424]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b68      	ldr	r3, [pc, #416]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a67      	ldr	r2, [pc, #412]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x192>
 80029aa:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a64      	ldr	r2, [pc, #400]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b62      	ldr	r3, [pc, #392]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a61      	ldr	r2, [pc, #388]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f023 020f 	bic.w	r2, r3, #15
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	495a      	ldr	r1, [pc, #360]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d054      	beq.n	8002a96 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fbda 	bl	80011a4 <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f6:	f7fe fbd5 	bl	80011a4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	@ 0x64
 8002a04:	d902      	bls.n	8002a0c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	f000 bf19 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a2c:	d802      	bhi.n	8002a34 <HAL_RCC_OscConfig+0x204>
 8002a2e:	4b44      	ldr	r3, [pc, #272]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0x230>
 8002a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a4c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a5c:	4b38      	ldr	r3, [pc, #224]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a64:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0b0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1c6>
 8002a94:	e057      	b.n	8002b46 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a96:	f7fe fb85 	bl	80011a4 <HAL_GetTick>
 8002a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fb80 	bl	80011a4 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	@ 0x64
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	f000 bec4 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002ab6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002aca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ad6:	d802      	bhi.n	8002ade <HAL_RCC_OscConfig+0x2ae>
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x2da>
 8002ade:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002af2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002afa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_RCC_OscConfig+0x310>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b0e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b12:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b1e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1b0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x270>
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_OscConfig+0x316>
 8002b40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 816c 	beq.w	8002e34 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b5c:	4bcc      	ldr	r3, [pc, #816]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b68:	4bc9      	ldr	r3, [pc, #804]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d16d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x420>
 8002b74:	4bc6      	ldr	r3, [pc, #792]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d167      	bne.n	8002c50 <HAL_RCC_OscConfig+0x420>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b92:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b9e:	d802      	bhi.n	8002ba6 <HAL_RCC_OscConfig+0x376>
 8002ba0:	4bbb      	ldr	r3, [pc, #748]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	e013      	b.n	8002bce <HAL_RCC_OscConfig+0x39e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bca:	4bb1      	ldr	r3, [pc, #708]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002bd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002be0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f002 021f 	and.w	r2, r2, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCC_OscConfig+0x3e6>
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d002      	beq.n	8002c16 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f000 be14 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b9e      	ldr	r3, [pc, #632]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	21f8      	movs	r1, #248	@ 0xf8
 8002c2c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c34:	fa91 f1a1 	rbit	r1, r1
 8002c38:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c40:	fab1 f181 	clz	r1, r1
 8002c44:	b2c9      	uxtb	r1, r1
 8002c46:	408b      	lsls	r3, r1
 8002c48:	4991      	ldr	r1, [pc, #580]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e0f1      	b.n	8002e34 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8083 	beq.w	8002d68 <HAL_RCC_OscConfig+0x538>
 8002c62:	2301      	movs	r3, #1
 8002c64:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c74:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fa89 	bl	80011a4 <HAL_GetTick>
 8002c92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa84 	bl	80011a4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d902      	bls.n	8002cae <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f000 bdc8 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ccc:	d802      	bhi.n	8002cd4 <HAL_RCC_OscConfig+0x4a4>
 8002cce:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x4cc>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002cec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002cf8:	4b65      	ldr	r3, [pc, #404]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d06:	fa92 f2a2 	rbit	r2, r2
 8002d0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0b4      	beq.n	8002c98 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b58      	ldr	r3, [pc, #352]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	21f8      	movs	r1, #248	@ 0xf8
 8002d44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d4c:	fa91 f1a1 	rbit	r1, r1
 8002d50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d58:	fab1 f181 	clz	r1, r1
 8002d5c:	b2c9      	uxtb	r1, r1
 8002d5e:	408b      	lsls	r3, r1
 8002d60:	494b      	ldr	r1, [pc, #300]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
 8002d66:	e065      	b.n	8002e34 <HAL_RCC_OscConfig+0x604>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2300      	movs	r3, #0
 8002d92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fe fa06 	bl	80011a4 <HAL_GetTick>
 8002d98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fa01 	bl	80011a4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	f000 bd45 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002db4:	2302      	movs	r3, #2
 8002db6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dd2:	d802      	bhi.n	8002dda <HAL_RCC_OscConfig+0x5aa>
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	e013      	b.n	8002e02 <HAL_RCC_OscConfig+0x5d2>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002dec:	2302      	movs	r3, #2
 8002dee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002df2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002dfe:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCC_OscConfig+0x660>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	2202      	movs	r2, #2
 8002e04:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e08:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e0c:	fa92 f2a2 	rbit	r2, r2
 8002e10:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e14:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e18:	fab2 f282 	clz	r2, r2
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f042 0220 	orr.w	r2, r2, #32
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f002 021f 	and.w	r2, r2, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1b4      	bne.n	8002d9e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8115 	beq.w	8003074 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d07e      	beq.n	8002f58 <HAL_RCC_OscConfig+0x728>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_OscConfig+0x664>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2301      	movs	r3, #1
 8002e82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe f98e 	bl	80011a4 <HAL_GetTick>
 8002e88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8c:	e00f      	b.n	8002eae <HAL_RCC_OscConfig+0x67e>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f984 	bl	80011a4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d902      	bls.n	8002eae <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	f000 bcc8 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ec8:	2202      	movs	r2, #2
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002eec:	2202      	movs	r2, #2
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f08:	4bb0      	ldr	r3, [pc, #704]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8002f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f14:	2102      	movs	r1, #2
 8002f16:	6019      	str	r1, [r3, #0]
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f1a3 	rbit	r1, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f2e:	6019      	str	r1, [r3, #0]
  return result;
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0a0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x668>
 8002f56:	e08d      	b.n	8003074 <HAL_RCC_OscConfig+0x844>
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f7a:	601a      	str	r2, [r3, #0]
  return result;
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f84:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b90      	ldr	r3, [pc, #576]	@ (80031d0 <HAL_RCC_OscConfig+0x9a0>)
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f903 	bl	80011a4 <HAL_GetTick>
 8002f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe f8fe 	bl	80011a4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d902      	bls.n	8002fba <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	f000 bc42 	b.w	800383e <HAL_RCC_OscConfig+0x100e>
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800300a:	2202      	movs	r2, #2
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003012:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003024:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	4b69      	ldr	r3, [pc, #420]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003032:	2102      	movs	r1, #2
 8003034:	6019      	str	r1, [r3, #0]
 8003036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f1a3 	rbit	r1, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304c:	6019      	str	r1, [r3, #0]
  return result;
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d197      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003078:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 819e 	beq.w	80033c6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003090:	4b4e      	ldr	r3, [pc, #312]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b4b      	ldr	r3, [pc, #300]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4a4a      	ldr	r2, [pc, #296]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	61d3      	str	r3, [r2, #28]
 80030a8:	4b48      	ldr	r3, [pc, #288]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030be:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030c2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <HAL_RCC_OscConfig+0x9a4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11a      	bne.n	800310c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <HAL_RCC_OscConfig+0x9a4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3e      	ldr	r2, [pc, #248]	@ (80031d4 <HAL_RCC_OscConfig+0x9a4>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe f85f 	bl	80011a4 <HAL_GetTick>
 80030e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	e009      	b.n	8003100 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ec:	f7fe f85a 	bl	80011a4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	@ 0x64
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e39e      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <HAL_RCC_OscConfig+0x9a4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x8fa>
 800311c:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a2a      	ldr	r2, [pc, #168]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6213      	str	r3, [r2, #32]
 8003128:	e035      	b.n	8003196 <HAL_RCC_OscConfig+0x966>
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0x924>
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003140:	f023 0301 	bic.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
 8003146:	4b21      	ldr	r3, [pc, #132]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	4a20      	ldr	r2, [pc, #128]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	6213      	str	r3, [r2, #32]
 8003152:	e020      	b.n	8003196 <HAL_RCC_OscConfig+0x966>
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x94e>
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a18      	ldr	r2, [pc, #96]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4b16      	ldr	r3, [pc, #88]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x966>
 800317e:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a0f      	ldr	r2, [pc, #60]	@ (80031cc <HAL_RCC_OscConfig+0x99c>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a8:	f7fd fffc 	bl	80011a4 <HAL_GetTick>
 80031ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e012      	b.n	80031d8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fd fff7 	bl	80011a4 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d908      	bls.n	80031d8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e339      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	10908120 	.word	0x10908120
 80031d4:	40007000 	.word	0x40007000
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031e0:	2202      	movs	r2, #2
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003204:	2202      	movs	r2, #2
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800321e:	601a      	str	r2, [r3, #0]
  return result;
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003228:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_RCC_OscConfig+0xa10>
 800323a:	4b98      	ldr	r3, [pc, #608]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0xa38>
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003248:	2202      	movs	r2, #2
 800324a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	4b8d      	ldr	r3, [pc, #564]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800326c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003270:	2102      	movs	r1, #2
 8003272:	6011      	str	r1, [r2, #0]
 8003274:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003278:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fa92 f1a2 	rbit	r1, r2
 8003282:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003286:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800328a:	6011      	str	r1, [r2, #0]
  return result;
 800328c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003290:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f43f af7f 	beq.w	80031b2 <HAL_RCC_OscConfig+0x982>
 80032b4:	e07d      	b.n	80033b2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd ff75 	bl	80011a4 <HAL_GetTick>
 80032ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f7fd ff70 	bl	80011a4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e2b2      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 80032d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032e0:	2202      	movs	r2, #2
 80032e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800331e:	601a      	str	r2, [r3, #0]
  return result;
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003328:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_RCC_OscConfig+0xb10>
 800333a:	4b58      	ldr	r3, [pc, #352]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	e013      	b.n	8003368 <HAL_RCC_OscConfig+0xb38>
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f2a3 	rbit	r2, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	4b4d      	ldr	r3, [pc, #308]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003370:	2102      	movs	r1, #2
 8003372:	6011      	str	r1, [r2, #0]
 8003374:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003378:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	fa92 f1a2 	rbit	r1, r2
 8003382:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003386:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800338a:	6011      	str	r1, [r2, #0]
  return result;
 800338c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003390:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	fab2 f282 	clz	r2, r2
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f002 021f 	and.w	r2, r2, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d186      	bne.n	80032c0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4a37      	ldr	r2, [pc, #220]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8232 	beq.w	800383c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b30      	ldr	r3, [pc, #192]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	f000 8201 	beq.w	80037e8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	f040 8157 	bne.w	80036a6 <HAL_RCC_OscConfig+0xe76>
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003418:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800341c:	601a      	str	r2, [r3, #0]
  return result;
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003426:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003432:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	461a      	mov	r2, r3
 800343a:	2300      	movs	r3, #0
 800343c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fd feb1 	bl	80011a4 <HAL_GetTick>
 8003442:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	e009      	b.n	800345c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fd feac 	bl	80011a4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1f0      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f2a3 	rbit	r2, r3
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003480:	601a      	str	r2, [r3, #0]
  return result;
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800348a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b3f      	cmp	r3, #63	@ 0x3f
 8003494:	d804      	bhi.n	80034a0 <HAL_RCC_OscConfig+0xc70>
 8003496:	4b01      	ldr	r3, [pc, #4]	@ (800349c <HAL_RCC_OscConfig+0xc6c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e029      	b.n	80034f0 <HAL_RCC_OscConfig+0xcc0>
 800349c:	40021000 	.word	0x40021000
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	4bc3      	ldr	r3, [pc, #780]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034f4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80034f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034fc:	6011      	str	r1, [r2, #0]
 80034fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003502:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	fa92 f1a2 	rbit	r1, r2
 800350c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003510:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003514:	6011      	str	r1, [r2, #0]
  return result;
 8003516:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800351a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	f042 0220 	orr.w	r2, r2, #32
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	f002 021f 	and.w	r2, r2, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d185      	bne.n	8003448 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4baf      	ldr	r3, [pc, #700]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	430b      	orrs	r3, r1
 800355e:	49a7      	ldr	r1, [pc, #668]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
 8003564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003568:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800356c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003576:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	fa93 f2a3 	rbit	r2, r3
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003588:	601a      	str	r2, [r3, #0]
  return result;
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003592:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800359e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	461a      	mov	r2, r3
 80035a6:	2301      	movs	r3, #1
 80035a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd fdfb 	bl	80011a4 <HAL_GetTick>
 80035ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b2:	e009      	b.n	80035c8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fdf6 	bl	80011a4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e13a      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035ec:	601a      	str	r2, [r3, #0]
  return result;
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80035f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003600:	d802      	bhi.n	8003608 <HAL_RCC_OscConfig+0xdd8>
 8003602:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e027      	b.n	8003658 <HAL_RCC_OscConfig+0xe28>
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	4b69      	ldr	r3, [pc, #420]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800365c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003660:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800366a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	fa92 f1a2 	rbit	r1, r2
 8003674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003678:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800367c:	6011      	str	r1, [r2, #0]
  return result;
 800367e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003682:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	f042 0220 	orr.w	r2, r2, #32
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f002 021f 	and.w	r2, r2, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f202 	lsl.w	r2, r1, r2
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d087      	beq.n	80035b4 <HAL_RCC_OscConfig+0xd84>
 80036a4:	e0ca      	b.n	800383c <HAL_RCC_OscConfig+0x100c>
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd fd5a 	bl	80011a4 <HAL_GetTick>
 80036f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f4:	e009      	b.n	800370a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fd fd55 	bl	80011a4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e099      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800372e:	601a      	str	r2, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003734:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b3f      	cmp	r3, #63	@ 0x3f
 8003742:	d802      	bhi.n	800374a <HAL_RCC_OscConfig+0xf1a>
 8003744:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	e027      	b.n	800379a <HAL_RCC_OscConfig+0xf6a>
 800374a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003752:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003774:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003782:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	fa93 f2a3 	rbit	r2, r3
 800378c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003790:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_RCC_OscConfig+0xfcc>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800379e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037a2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037a6:	6011      	str	r1, [r2, #0]
 80037a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ac:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	fa92 f1a2 	rbit	r1, r2
 80037b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037be:	6011      	str	r1, [r2, #0]
  return result;
 80037c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037c4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	fab2 f282 	clz	r2, r2
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	f042 0220 	orr.w	r2, r2, #32
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f002 021f 	and.w	r2, r2, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d187      	bne.n	80036f6 <HAL_RCC_OscConfig+0xec6>
 80037e6:	e029      	b.n	800383c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d103      	bne.n	8003800 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e020      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
 80037fc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_RCC_OscConfig+0x1018>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003808:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800380c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d10b      	bne.n	8003838 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003820:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003824:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b09e      	sub	sp, #120	@ 0x78
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e154      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b89      	ldr	r3, [pc, #548]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b86      	ldr	r3, [pc, #536]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4984      	ldr	r1, [pc, #528]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b82      	ldr	r3, [pc, #520]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e13c      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4978      	ldr	r1, [pc, #480]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80cd 	beq.w	8003a5a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d137      	bne.n	8003938 <HAL_RCC_ClockConfig+0xec>
 80038c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b3f      	cmp	r3, #63	@ 0x3f
 80038e0:	d802      	bhi.n	80038e8 <HAL_RCC_ClockConfig+0x9c>
 80038e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_ClockConfig+0xbc>
 80038e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80038f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80038fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003904:	4b62      	ldr	r3, [pc, #392]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800390c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800390e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003910:	fa92 f2a2 	rbit	r2, r2
 8003914:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003916:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d171      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0ea      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d137      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x164>
 8003940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003944:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800394e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b3f      	cmp	r3, #63	@ 0x3f
 8003958:	d802      	bhi.n	8003960 <HAL_RCC_ClockConfig+0x114>
 800395a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	e00f      	b.n	8003980 <HAL_RCC_ClockConfig+0x134>
 8003960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003964:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	647b      	str	r3, [r7, #68]	@ 0x44
 800396e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003972:	643b      	str	r3, [r7, #64]	@ 0x40
 8003974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800397c:	4b44      	ldr	r3, [pc, #272]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003984:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003988:	fa92 f2a2 	rbit	r2, r2
 800398c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800398e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d135      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0ae      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80039c6:	d802      	bhi.n	80039ce <HAL_RCC_ClockConfig+0x182>
 80039c8:	4b31      	ldr	r3, [pc, #196]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	e00d      	b.n	80039ea <HAL_RCC_ClockConfig+0x19e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	2202      	movs	r2, #2
 80039ec:	61ba      	str	r2, [r7, #24]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	617a      	str	r2, [r7, #20]
  return result;
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	fab2 f282 	clz	r2, r2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f042 0220 	orr.w	r2, r2, #32
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f002 021f 	and.w	r2, r2, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e07a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 0203 	bic.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	491a      	ldr	r1, [pc, #104]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2a:	f7fd fbbb 	bl	80011a4 <HAL_GetTick>
 8003a2e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a32:	f7fd fbb7 	bl	80011a4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e062      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a48:	4b11      	ldr	r3, [pc, #68]	@ (8003a90 <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 020c 	and.w	r2, r3, #12
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d1eb      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d215      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 0207 	bic.w	r2, r3, #7
 8003a70:	4906      	ldr	r1, [pc, #24]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <HAL_RCC_ClockConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d006      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e041      	b.n	8003b0e <HAL_RCC_ClockConfig+0x2c2>
 8003a8a:	bf00      	nop
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_RCC_ClockConfig+0x2cc>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	491a      	ldr	r1, [pc, #104]	@ (8003b18 <HAL_RCC_ClockConfig+0x2cc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_RCC_ClockConfig+0x2cc>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4912      	ldr	r1, [pc, #72]	@ (8003b18 <HAL_RCC_ClockConfig+0x2cc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ad2:	f000 f829 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <HAL_RCC_ClockConfig+0x2cc>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae0:	22f0      	movs	r2, #240	@ 0xf0
 8003ae2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fa92 f2a2 	rbit	r2, r2
 8003aea:	60fa      	str	r2, [r7, #12]
  return result;
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	40d3      	lsrs	r3, r2
 8003af6:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <HAL_RCC_ClockConfig+0x2d0>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	fa21 f303 	lsr.w	r3, r1, r3
 8003afe:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_RCC_ClockConfig+0x2d4>)
 8003b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_RCC_ClockConfig+0x2d8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fa30 	bl	8000f6c <HAL_InitTick>
  
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3778      	adds	r7, #120	@ 0x78
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	08008640 	.word	0x08008640
 8003b20:	2000000c 	.word	0x2000000c
 8003b24:	20000010 	.word	0x20000010

08003b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b42:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x30>
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x36>
 8003b56:	e026      	b.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b58:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b5a:	613b      	str	r3, [r7, #16]
      break;
 8003b5c:	e026      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	0c9b      	lsrs	r3, r3, #18
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b68:	5cd3      	ldrb	r3, [r2, r3]
 8003b6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b84:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e004      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a0c      	ldr	r2, [pc, #48]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
      break;
 8003ba4:	e002      	b.n	8003bac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ba8:	613b      	str	r3, [r7, #16]
      break;
 8003baa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bac:	693b      	ldr	r3, [r7, #16]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	007a1200 	.word	0x007a1200
 8003bc4:	08008658 	.word	0x08008658
 8003bc8:	08008668 	.word	0x08008668
 8003bcc:	003d0900 	.word	0x003d0900

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	@ (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003bee:	f7ff ffef 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bfc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c00:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	fa92 f2a2 	rbit	r2, r2
 8003c08:	603a      	str	r2, [r7, #0]
  return result;
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	fab2 f282 	clz	r2, r2
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	40d3      	lsrs	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c16:	5cd3      	ldrb	r3, [r2, r3]
 8003c18:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08008650 	.word	0x08008650

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c32:	f7ff ffcd 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c36:	4601      	mov	r1, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003c40:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003c44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	fa92 f2a2 	rbit	r2, r2
 8003c4c:	603a      	str	r2, [r7, #0]
  return result;
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	fab2 f282 	clz	r2, r2
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	40d3      	lsrs	r3, r2
 8003c58:	4a04      	ldr	r2, [pc, #16]	@ (8003c6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	08008650 	.word	0x08008650

08003c70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c80:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ca4:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0207 	and.w	r2, r3, #7
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40022000 	.word	0x40022000

08003cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	@ 0x48
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80cb 	beq.w	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf8:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10e      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	4b82      	ldr	r3, [pc, #520]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4a81      	ldr	r2, [pc, #516]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	61d3      	str	r3, [r2, #28]
 8003d10:	4b7f      	ldr	r3, [pc, #508]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b7c      	ldr	r3, [pc, #496]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b79      	ldr	r3, [pc, #484]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a78      	ldr	r2, [pc, #480]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd fa33 	bl	80011a4 <HAL_GetTick>
 8003d3e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fd fa2f 	bl	80011a4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	@ 0x64
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0d9      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b6f      	ldr	r3, [pc, #444]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d60:	4b6b      	ldr	r3, [pc, #428]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07b      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d074      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7e:	4b64      	ldr	r3, [pc, #400]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b5d      	ldr	r3, [pc, #372]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	461a      	mov	r2, r3
 8003da8:	2301      	movs	r3, #1
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b54      	ldr	r3, [pc, #336]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd0:	4a4f      	ldr	r2, [pc, #316]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd f9e0 	bl	80011a4 <HAL_GetTick>
 8003de4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd f9dc 	bl	80011a4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e084      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	61fb      	str	r3, [r7, #28]
  return result;
 8003e16:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003e28:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	e007      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	4b35      	ldr	r3, [pc, #212]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	2202      	movs	r2, #2
 8003e40:	613a      	str	r2, [r7, #16]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	fa92 f2a2 	rbit	r2, r2
 8003e48:	60fa      	str	r2, [r7, #12]
  return result;
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fab2 f282 	clz	r2, r2
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	f002 021f 	and.w	r2, r2, #31
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0bf      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e68:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4926      	ldr	r1, [pc, #152]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e82:	4b23      	ldr	r3, [pc, #140]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4a22      	ldr	r2, [pc, #136]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	f023 0203 	bic.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	491a      	ldr	r1, [pc, #104]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb8:	4b15      	ldr	r3, [pc, #84]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebc:	f023 0210 	bic.w	r2, r3, #16
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4912      	ldr	r1, [pc, #72]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eda:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	490b      	ldr	r1, [pc, #44]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4903      	ldr	r1, [pc, #12]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3748      	adds	r7, #72	@ 0x48
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
 8003f18:	10908100 	.word	0x10908100

08003f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e049      	b.n	8003fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fc ffb0 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f000 fb28 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d001      	beq.n	8003fe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e038      	b.n	8004056 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8004064 <HAL_TIM_Base_Start+0x98>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_TIM_Base_Start+0x48>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d009      	beq.n	8004014 <HAL_TIM_Base_Start+0x48>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <HAL_TIM_Base_Start+0x9c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_Base_Start+0x48>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a17      	ldr	r2, [pc, #92]	@ (800406c <HAL_TIM_Base_Start+0xa0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d115      	bne.n	8004040 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	4b15      	ldr	r3, [pc, #84]	@ (8004070 <HAL_TIM_Base_Start+0xa4>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b06      	cmp	r3, #6
 8004024:	d015      	beq.n	8004052 <HAL_TIM_Base_Start+0x86>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402c:	d011      	beq.n	8004052 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	e008      	b.n	8004052 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0201 	orr.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e000      	b.n	8004054 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40014000 	.word	0x40014000
 8004070:	00010007 	.word	0x00010007

08004074 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_TIM_Base_Stop+0x38>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a1a      	ldr	r2, [r3, #32]
 8004092:	f240 4344 	movw	r3, #1092	@ 0x444
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d107      	bne.n	80040ac <HAL_TIM_Base_Stop+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e040      	b.n	800415e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1c      	ldr	r2, [pc, #112]	@ (800416c <HAL_TIM_Base_Start_IT+0xa8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00e      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d009      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_TIM_Base_Start_IT+0xac>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x58>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_TIM_Base_Start_IT+0xb0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d115      	bne.n	8004148 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	4b15      	ldr	r3, [pc, #84]	@ (8004178 <HAL_TIM_Base_Start_IT+0xb4>)
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d015      	beq.n	800415a <HAL_TIM_Base_Start_IT+0x96>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d011      	beq.n	800415a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e008      	b.n	800415a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e000      	b.n	800415c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40014000 	.word	0x40014000
 8004178:	00010007 	.word	0x00010007

0800417c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d020      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01b      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0202 	mvn.w	r2, #2
 80041b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9d4 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 80041cc:	e005      	b.n	80041da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9c6 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f9d7 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d020      	beq.n	800422c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01b      	beq.n	800422c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0204 	mvn.w	r2, #4
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9ae 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f9a0 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f9b1 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0208 	mvn.w	r2, #8
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2204      	movs	r2, #4
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f988 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f97a 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f98b 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0210 	mvn.w	r2, #16
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2208      	movs	r2, #8
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f962 	bl	8004574 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f954 	bl	8004560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f965 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0201 	mvn.w	r2, #1
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fa5a 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00c      	beq.n	800430c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d007      	beq.n	800430c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fae8 	bl	80048dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00c      	beq.n	8004330 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fae0 	bl	80048f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f924 	bl	800459c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00c      	beq.n	8004378 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0220 	mvn.w	r2, #32
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 faa8 	bl	80048c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIM_GenerateEvent+0x18>
 8004394:	2302      	movs	r3, #2
 8004396:	e014      	b.n	80043c2 <HAL_TIM_GenerateEvent+0x42>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_ConfigClockSource+0x1c>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0b6      	b.n	8004558 <HAL_TIM_ConfigClockSource+0x18a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004408:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004414:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004426:	d03e      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0xd8>
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800442c:	f200 8087 	bhi.w	800453e <HAL_TIM_ConfigClockSource+0x170>
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004434:	f000 8086 	beq.w	8004544 <HAL_TIM_ConfigClockSource+0x176>
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d87f      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 800443e:	2b70      	cmp	r3, #112	@ 0x70
 8004440:	d01a      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0xaa>
 8004442:	2b70      	cmp	r3, #112	@ 0x70
 8004444:	d87b      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 8004446:	2b60      	cmp	r3, #96	@ 0x60
 8004448:	d050      	beq.n	80044ec <HAL_TIM_ConfigClockSource+0x11e>
 800444a:	2b60      	cmp	r3, #96	@ 0x60
 800444c:	d877      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 800444e:	2b50      	cmp	r3, #80	@ 0x50
 8004450:	d03c      	beq.n	80044cc <HAL_TIM_ConfigClockSource+0xfe>
 8004452:	2b50      	cmp	r3, #80	@ 0x50
 8004454:	d873      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d058      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x13e>
 800445a:	2b40      	cmp	r3, #64	@ 0x40
 800445c:	d86f      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 800445e:	2b30      	cmp	r3, #48	@ 0x30
 8004460:	d064      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x15e>
 8004462:	2b30      	cmp	r3, #48	@ 0x30
 8004464:	d86b      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 8004466:	2b20      	cmp	r3, #32
 8004468:	d060      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x15e>
 800446a:	2b20      	cmp	r3, #32
 800446c:	d867      	bhi.n	800453e <HAL_TIM_ConfigClockSource+0x170>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d05c      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x15e>
 8004472:	2b10      	cmp	r3, #16
 8004474:	d05a      	beq.n	800452c <HAL_TIM_ConfigClockSource+0x15e>
 8004476:	e062      	b.n	800453e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004488:	f000 f990 	bl	80047ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800449a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]
      break;
 80044a4:	e04f      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b6:	f000 f979 	bl	80047ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c8:	609a      	str	r2, [r3, #8]
      break;
 80044ca:	e03c      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d8:	461a      	mov	r2, r3
 80044da:	f000 f8ed 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2150      	movs	r1, #80	@ 0x50
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f946 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 80044ea:	e02c      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044f8:	461a      	mov	r2, r3
 80044fa:	f000 f90c 	bl	8004716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2160      	movs	r1, #96	@ 0x60
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f936 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 800450a:	e01c      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004518:	461a      	mov	r2, r3
 800451a:	f000 f8cd 	bl	80046b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2140      	movs	r1, #64	@ 0x40
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f926 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 800452a:	e00c      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 f91d 	bl	8004776 <TIM_ITRx_SetConfig>
      break;
 800453c:	e003      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
      break;
 8004542:	e000      	b.n	8004546 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004544:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a38      	ldr	r2, [pc, #224]	@ (80046a4 <TIM_Base_SetConfig+0xf4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0x28>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0x28>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <TIM_Base_SetConfig+0xf8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d108      	bne.n	80045ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2d      	ldr	r2, [pc, #180]	@ (80046a4 <TIM_Base_SetConfig+0xf4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <TIM_Base_SetConfig+0x6a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f8:	d00f      	beq.n	800461a <TIM_Base_SetConfig+0x6a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	@ (80046a8 <TIM_Base_SetConfig+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00b      	beq.n	800461a <TIM_Base_SetConfig+0x6a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <TIM_Base_SetConfig+0xfc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d007      	beq.n	800461a <TIM_Base_SetConfig+0x6a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a28      	ldr	r2, [pc, #160]	@ (80046b0 <TIM_Base_SetConfig+0x100>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d003      	beq.n	800461a <TIM_Base_SetConfig+0x6a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <TIM_Base_SetConfig+0x104>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d108      	bne.n	800462c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a14      	ldr	r2, [pc, #80]	@ (80046a4 <TIM_Base_SetConfig+0xf4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00b      	beq.n	8004670 <TIM_Base_SetConfig+0xc0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <TIM_Base_SetConfig+0xfc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_Base_SetConfig+0xc0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a13      	ldr	r2, [pc, #76]	@ (80046b0 <TIM_Base_SetConfig+0x100>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0xc0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <TIM_Base_SetConfig+0x104>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d105      	bne.n	8004696 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	611a      	str	r2, [r3, #16]
  }
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800

080046b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f023 030a 	bic.w	r3, r3, #10
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 0210 	bic.w	r2, r3, #16
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004752:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	f043 0307 	orr.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e054      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a24      	ldr	r2, [pc, #144]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004834:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d009      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a11      	ldr	r2, [pc, #68]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40014000 	.word	0x40014000

080048c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e040      	b.n	8004998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fc fadc 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f95e 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f825 	bl	80049a0 <UART_SetConfig>
 8004956:	4603      	mov	r3, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e01b      	b.n	8004998 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800496e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800497e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9dd 	bl	8004d50 <UART_CheckIdleState>
 8004996:	4603      	mov	r3, r0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b8a      	ldr	r3, [pc, #552]	@ (8004bf4 <UART_SetConfig+0x254>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	6979      	ldr	r1, [r7, #20]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a78      	ldr	r2, [pc, #480]	@ (8004bf8 <UART_SetConfig+0x258>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d120      	bne.n	8004a5e <UART_SetConfig+0xbe>
 8004a1c:	4b77      	ldr	r3, [pc, #476]	@ (8004bfc <UART_SetConfig+0x25c>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d817      	bhi.n	8004a58 <UART_SetConfig+0xb8>
 8004a28:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0x90>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a4d 	.word	0x08004a4d
 8004a38:	08004a53 	.word	0x08004a53
 8004a3c:	08004a47 	.word	0x08004a47
 8004a40:	2300      	movs	r3, #0
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e01d      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a46:	2302      	movs	r3, #2
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e01a      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e017      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a52:	2308      	movs	r3, #8
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e011      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a67      	ldr	r2, [pc, #412]	@ (8004c00 <UART_SetConfig+0x260>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d102      	bne.n	8004a6e <UART_SetConfig+0xce>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e009      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a64      	ldr	r2, [pc, #400]	@ (8004c04 <UART_SetConfig+0x264>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d102      	bne.n	8004a7e <UART_SetConfig+0xde>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
 8004a7c:	e001      	b.n	8004a82 <UART_SetConfig+0xe2>
 8004a7e:	2310      	movs	r3, #16
 8004a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a8a:	d15a      	bne.n	8004b42 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a8c:	7ffb      	ldrb	r3, [r7, #31]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d827      	bhi.n	8004ae2 <UART_SetConfig+0x142>
 8004a92:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <UART_SetConfig+0xf8>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ae3 	.word	0x08004ae3
 8004aa8:	08004ad3 	.word	0x08004ad3
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004ae3 	.word	0x08004ae3
 8004ab4:	08004ae3 	.word	0x08004ae3
 8004ab8:	08004adb 	.word	0x08004adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7ff f894 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	61b8      	str	r0, [r7, #24]
        break;
 8004ac2:	e013      	b.n	8004aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff f8b2 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8004ac8:	61b8      	str	r0, [r7, #24]
        break;
 8004aca:	e00f      	b.n	8004aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b4e      	ldr	r3, [pc, #312]	@ (8004c08 <UART_SetConfig+0x268>)
 8004ace:	61bb      	str	r3, [r7, #24]
        break;
 8004ad0:	e00c      	b.n	8004aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7ff f829 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8004ad6:	61b8      	str	r0, [r7, #24]
        break;
 8004ad8:	e008      	b.n	8004aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ade:	61bb      	str	r3, [r7, #24]
        break;
 8004ae0:	e004      	b.n	8004aec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8004aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d074      	beq.n	8004bdc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	005a      	lsls	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	d916      	bls.n	8004b3c <UART_SetConfig+0x19c>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b14:	d212      	bcs.n	8004b3c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f023 030f 	bic.w	r3, r3, #15
 8004b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	89fb      	ldrh	r3, [r7, #14]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	89fa      	ldrh	r2, [r7, #14]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	e04f      	b.n	8004bdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	77bb      	strb	r3, [r7, #30]
 8004b40:	e04c      	b.n	8004bdc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b42:	7ffb      	ldrb	r3, [r7, #31]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d828      	bhi.n	8004b9a <UART_SetConfig+0x1fa>
 8004b48:	a201      	add	r2, pc, #4	@ (adr r2, 8004b50 <UART_SetConfig+0x1b0>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b9b 	.word	0x08004b9b
 8004b60:	08004b8b 	.word	0x08004b8b
 8004b64:	08004b9b 	.word	0x08004b9b
 8004b68:	08004b9b 	.word	0x08004b9b
 8004b6c:	08004b9b 	.word	0x08004b9b
 8004b70:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b74:	f7ff f838 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8004b78:	61b8      	str	r0, [r7, #24]
        break;
 8004b7a:	e013      	b.n	8004ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7ff f856 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8004b80:	61b8      	str	r0, [r7, #24]
        break;
 8004b82:	e00f      	b.n	8004ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b20      	ldr	r3, [pc, #128]	@ (8004c08 <UART_SetConfig+0x268>)
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e00c      	b.n	8004ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe ffcd 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8004b8e:	61b8      	str	r0, [r7, #24]
        break;
 8004b90:	e008      	b.n	8004ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b96:	61bb      	str	r3, [r7, #24]
        break;
 8004b98:	e004      	b.n	8004ba4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d018      	beq.n	8004bdc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	085a      	lsrs	r2, r3, #1
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b0f      	cmp	r3, #15
 8004bc2:	d909      	bls.n	8004bd8 <UART_SetConfig+0x238>
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bca:	d205      	bcs.n	8004bd8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e001      	b.n	8004bdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	efff69f3 	.word	0xefff69f3
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40004400 	.word	0x40004400
 8004c04:	40004800 	.word	0x40004800
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d0a:	d10a      	bne.n	8004d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b098      	sub	sp, #96	@ 0x60
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d60:	f7fc fa20 	bl	80011a4 <HAL_GetTick>
 8004d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d12e      	bne.n	8004dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f88c 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e062      	b.n	8004e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d149      	bne.n	8004e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de8:	2200      	movs	r2, #0
 8004dea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f856 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03c      	beq.n	8004e74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	623b      	str	r3, [r7, #32]
   return(result);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69b9      	ldr	r1, [r7, #24]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e011      	b.n	8004e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3758      	adds	r7, #88	@ 0x58
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	e04f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d04b      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fc f973 	bl	80011a4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e04e      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d037      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b80      	cmp	r3, #128	@ 0x80
 8004ee6:	d034      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d031      	beq.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d110      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2208      	movs	r2, #8
 8004f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f838 	bl	8004f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e029      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f2c:	d111      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f81e 	bl	8004f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e00f      	b.n	8004f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d0a0      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b095      	sub	sp, #84	@ 0x54
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e6      	bne.n	8004f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e5      	bne.n	8004fb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d118      	bne.n	8005022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f023 0310 	bic.w	r3, r3, #16
 8005004:	647b      	str	r3, [r7, #68]	@ 0x44
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	613b      	str	r3, [r7, #16]
   return(result);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e6      	bne.n	8004ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005036:	bf00      	nop
 8005038:	3754      	adds	r7, #84	@ 0x54
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504a:	f3ef 8305 	mrs	r3, IPSR
 800504e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005050:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005056:	f3ef 8310 	mrs	r3, PRIMASK
 800505a:	607b      	str	r3, [r7, #4]
  return(result);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <osKernelInitialize+0x32>
 8005062:	4b11      	ldr	r3, [pc, #68]	@ (80050a8 <osKernelInitialize+0x64>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d109      	bne.n	800507e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800506a:	f3ef 8311 	mrs	r3, BASEPRI
 800506e:	603b      	str	r3, [r7, #0]
  return(result);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005076:	f06f 0305 	mvn.w	r3, #5
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e00c      	b.n	8005098 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800507e:	4b0a      	ldr	r3, [pc, #40]	@ (80050a8 <osKernelInitialize+0x64>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005086:	4b08      	ldr	r3, [pc, #32]	@ (80050a8 <osKernelInitialize+0x64>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e002      	b.n	8005098 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005098:	68fb      	ldr	r3, [r7, #12]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000066c 	.word	0x2000066c

080050ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b2:	f3ef 8305 	mrs	r3, IPSR
 80050b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80050b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8310 	mrs	r3, PRIMASK
 80050c2:	607b      	str	r3, [r7, #4]
  return(result);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <osKernelStart+0x32>
 80050ca:	4b11      	ldr	r3, [pc, #68]	@ (8005110 <osKernelStart+0x64>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d109      	bne.n	80050e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050d2:	f3ef 8311 	mrs	r3, BASEPRI
 80050d6:	603b      	str	r3, [r7, #0]
  return(result);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80050de:	f06f 0305 	mvn.w	r3, #5
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e00e      	b.n	8005104 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <osKernelStart+0x64>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80050ee:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <osKernelStart+0x64>)
 80050f0:	2202      	movs	r2, #2
 80050f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80050f4:	f001 f8b0 	bl	8006258 <vTaskStartScheduler>
      stat = osOK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e002      	b.n	8005104 <osKernelStart+0x58>
    } else {
      stat = osError;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000066c 	.word	0x2000066c

08005114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b092      	sub	sp, #72	@ 0x48
 8005118:	af04      	add	r7, sp, #16
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005124:	f3ef 8305 	mrs	r3, IPSR
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8094 	bne.w	800525a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005132:	f3ef 8310 	mrs	r3, PRIMASK
 8005136:	623b      	str	r3, [r7, #32]
  return(result);
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 808d 	bne.w	800525a <osThreadNew+0x146>
 8005140:	4b48      	ldr	r3, [pc, #288]	@ (8005264 <osThreadNew+0x150>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d106      	bne.n	8005156 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005148:	f3ef 8311 	mrs	r3, BASEPRI
 800514c:	61fb      	str	r3, [r7, #28]
  return(result);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f040 8082 	bne.w	800525a <osThreadNew+0x146>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d07e      	beq.n	800525a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005160:	2318      	movs	r3, #24
 8005162:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8005164:	2300      	movs	r3, #0
 8005166:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005168:	f107 031b 	add.w	r3, r7, #27
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d045      	beq.n	8005206 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <osThreadNew+0x74>
        name = attr->name;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <osThreadNew+0x9a>
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	2b38      	cmp	r3, #56	@ 0x38
 80051a0:	d805      	bhi.n	80051ae <osThreadNew+0x9a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <osThreadNew+0x9e>
        return (NULL);
 80051ae:	2300      	movs	r3, #0
 80051b0:	e054      	b.n	800525c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00e      	beq.n	80051e8 <osThreadNew+0xd4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2ba7      	cmp	r3, #167	@ 0xa7
 80051d0:	d90a      	bls.n	80051e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <osThreadNew+0xd4>
        mem = 1;
 80051e2:	2301      	movs	r3, #1
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e6:	e010      	b.n	800520a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10c      	bne.n	800520a <osThreadNew+0xf6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <osThreadNew+0xf6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d104      	bne.n	800520a <osThreadNew+0xf6>
          mem = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005204:	e001      	b.n	800520a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	2b01      	cmp	r3, #1
 800520e:	d110      	bne.n	8005232 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005218:	9202      	str	r2, [sp, #8]
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fe2c 	bl	8005e84 <xTaskCreateStatic>
 800522c:	4603      	mov	r3, r0
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e013      	b.n	800525a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d110      	bne.n	800525a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	b29a      	uxth	r2, r3
 800523c:	f107 0314 	add.w	r3, r7, #20
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fe79 	bl	8005f42 <xTaskCreate>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <osThreadNew+0x146>
          hTask = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800525a:	697b      	ldr	r3, [r7, #20]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3738      	adds	r7, #56	@ 0x38
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	2000066c 	.word	0x2000066c

08005268 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005270:	f3ef 8305 	mrs	r3, IPSR
 8005274:	613b      	str	r3, [r7, #16]
  return(result);
 8005276:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10f      	bne.n	800529c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527c:	f3ef 8310 	mrs	r3, PRIMASK
 8005280:	60fb      	str	r3, [r7, #12]
  return(result);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <osDelay+0x34>
 8005288:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <osDelay+0x58>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d109      	bne.n	80052a4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005290:	f3ef 8311 	mrs	r3, BASEPRI
 8005294:	60bb      	str	r3, [r7, #8]
  return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <osDelay+0x3c>
    stat = osErrorISR;
 800529c:	f06f 0305 	mvn.w	r3, #5
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e007      	b.n	80052b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 ff9c 	bl	80061ec <vTaskDelay>
    }
  }

  return (stat);
 80052b4:	697b      	ldr	r3, [r7, #20]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	2000066c 	.word	0x2000066c

080052c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a07      	ldr	r2, [pc, #28]	@ (80052f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80052d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a06      	ldr	r2, [pc, #24]	@ (80052f4 <vApplicationGetIdleTaskMemory+0x30>)
 80052da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000670 	.word	0x20000670
 80052f4:	20000718 	.word	0x20000718

080052f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <vApplicationGetTimerTaskMemory+0x2c>)
 8005308:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a06      	ldr	r2, [pc, #24]	@ (8005328 <vApplicationGetTimerTaskMemory+0x30>)
 800530e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005316:	601a      	str	r2, [r3, #0]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000918 	.word	0x20000918
 8005328:	200009c0 	.word	0x200009c0

0800532c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f103 0208 	add.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f103 0208 	add.w	r2, r3, #8
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 0208 	add.w	r2, r3, #8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d103      	bne.n	80053ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e00c      	b.n	8005408 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3308      	adds	r3, #8
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <vListInsert+0x2e>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d2f6      	bcs.n	80053f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6892      	ldr	r2, [r2, #8]
 8005456:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6852      	ldr	r2, [r2, #4]
 8005460:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d103      	bne.n	8005474 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054c0:	f002 f86a 	bl	8007598 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	3b01      	subs	r3, #1
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	22ff      	movs	r2, #255	@ 0xff
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	22ff      	movs	r2, #255	@ 0xff
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01a      	beq.n	8005554 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3310      	adds	r3, #16
 8005522:	4618      	mov	r0, r3
 8005524:	f001 f93c 	bl	80067a0 <xTaskRemoveFromEventList>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d012      	beq.n	8005554 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <xQueueGenericReset+0xd0>)
 8005530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	e009      	b.n	8005554 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3310      	adds	r3, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fef1 	bl	800532c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3324      	adds	r3, #36	@ 0x24
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff feec 	bl	800532c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005554:	f002 f852 	bl	80075fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005558:	2301      	movs	r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08e      	sub	sp, #56	@ 0x38
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <xQueueGenericCreateStatic+0x56>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <xQueueGenericCreateStatic+0x5a>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericCreateStatic+0x5c>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <xQueueGenericCreateStatic+0x84>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xQueueGenericCreateStatic+0x88>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <xQueueGenericCreateStatic+0x8a>
 80055f0:	2300      	movs	r3, #0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	61fb      	str	r3, [r7, #28]
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800560e:	2350      	movs	r3, #80	@ 0x50
 8005610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b50      	cmp	r3, #80	@ 0x50
 8005616:	d00b      	beq.n	8005630 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	61bb      	str	r3, [r7, #24]
}
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005642:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f805 	bl	8005660 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005658:	4618      	mov	r0, r3
 800565a:	3730      	adds	r7, #48	@ 0x30
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e002      	b.n	8005682 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800568e:	2101      	movs	r1, #1
 8005690:	69b8      	ldr	r0, [r7, #24]
 8005692:	f7ff feff 	bl	8005494 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	78fa      	ldrb	r2, [r7, #3]
 800569a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	@ 0x38
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056b6:	2300      	movs	r3, #0
 80056b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10b      	bne.n	80056dc <xQueueGenericSend+0x34>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	e7fd      	b.n	80056d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSend+0x42>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <xQueueGenericSend+0x46>
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <xQueueGenericSend+0x48>
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <xQueueGenericSend+0x64>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d103      	bne.n	800571a <xQueueGenericSend+0x72>
 8005712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <xQueueGenericSend+0x76>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <xQueueGenericSend+0x78>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <xQueueGenericSend+0x94>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	623b      	str	r3, [r7, #32]
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800573c:	f001 f9fc 	bl	8006b38 <xTaskGetSchedulerState>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <xQueueGenericSend+0xa4>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <xQueueGenericSend+0xa8>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <xQueueGenericSend+0xaa>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <xQueueGenericSend+0xc6>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	61fb      	str	r3, [r7, #28]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800576e:	f001 ff13 	bl	8007598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <xQueueGenericSend+0xdc>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d129      	bne.n	80057d8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800578a:	f000 fa0d 	bl	8005ba8 <prvCopyDataToQueue>
 800578e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579a:	3324      	adds	r3, #36	@ 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 ffff 	bl	80067a0 <xTaskRemoveFromEventList>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d013      	beq.n	80057d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057a8:	4b3f      	ldr	r3, [pc, #252]	@ (80058a8 <xQueueGenericSend+0x200>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	e00a      	b.n	80057d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057c0:	4b39      	ldr	r3, [pc, #228]	@ (80058a8 <xQueueGenericSend+0x200>)
 80057c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057d0:	f001 ff14 	bl	80075fc <vPortExitCritical>
				return pdPASS;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e063      	b.n	80058a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057de:	f001 ff0d 	bl	80075fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e05c      	b.n	80058a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ec:	f107 0314 	add.w	r3, r7, #20
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f839 	bl	8006868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057fa:	f001 feff 	bl	80075fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057fe:	f000 fd9b 	bl	8006338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005802:	f001 fec9 	bl	8007598 <vPortEnterCritical>
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800580c:	b25b      	sxtb	r3, r3
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d103      	bne.n	800581c <xQueueGenericSend+0x174>
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005822:	b25b      	sxtb	r3, r3
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d103      	bne.n	8005832 <xQueueGenericSend+0x18a>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005832:	f001 fee3 	bl	80075fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005836:	1d3a      	adds	r2, r7, #4
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f828 	bl	8006894 <xTaskCheckForTimeOut>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d124      	bne.n	8005894 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800584a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800584c:	f000 faa4 	bl	8005d98 <prvIsQueueFull>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	3310      	adds	r3, #16
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f000 ff4c 	bl	80066fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005866:	f000 fa2f 	bl	8005cc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800586a:	f000 fd73 	bl	8006354 <xTaskResumeAll>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f af7c 	bne.w	800576e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <xQueueGenericSend+0x200>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	e772      	b.n	800576e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800588a:	f000 fa1d 	bl	8005cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800588e:	f000 fd61 	bl	8006354 <xTaskResumeAll>
 8005892:	e76c      	b.n	800576e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005896:	f000 fa17 	bl	8005cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589a:	f000 fd5b 	bl	8006354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800589e:	2300      	movs	r3, #0
		}
	}
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3738      	adds	r7, #56	@ 0x38
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08e      	sub	sp, #56	@ 0x38
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <xQueueGenericSendFromISR+0x3e>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGenericSendFromISR+0x42>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericSendFromISR+0x44>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	623b      	str	r3, [r7, #32]
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d103      	bne.n	800591a <xQueueGenericSendFromISR+0x6e>
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <xQueueGenericSendFromISR+0x72>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericSendFromISR+0x74>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	61fb      	str	r3, [r7, #28]
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800593c:	f001 ff0c 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005940:	f3ef 8211 	mrs	r2, BASEPRI
 8005944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61ba      	str	r2, [r7, #24]
 8005956:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005958:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	429a      	cmp	r2, r3
 8005966:	d302      	bcc.n	800596e <xQueueGenericSendFromISR+0xc2>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d12c      	bne.n	80059c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800597e:	f000 f913 	bl	8005ba8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005982:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d112      	bne.n	80059b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	3324      	adds	r3, #36	@ 0x24
 8005998:	4618      	mov	r0, r3
 800599a:	f000 ff01 	bl	80067a0 <xTaskRemoveFromEventList>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e007      	b.n	80059c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	b25a      	sxtb	r2, r3
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80059c2:	2301      	movs	r3, #1
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80059c6:	e001      	b.n	80059cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059c8:	2300      	movs	r3, #0
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80059cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3738      	adds	r7, #56	@ 0x38
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08c      	sub	sp, #48	@ 0x30
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <xQueueReceive+0x32>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	623b      	str	r3, [r7, #32]
}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	e7fd      	b.n	8005a12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d103      	bne.n	8005a24 <xQueueReceive+0x40>
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <xQueueReceive+0x44>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <xQueueReceive+0x46>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <xQueueReceive+0x62>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	61fb      	str	r3, [r7, #28]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a46:	f001 f877 	bl	8006b38 <xTaskGetSchedulerState>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <xQueueReceive+0x72>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueReceive+0x76>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueReceive+0x78>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <xQueueReceive+0x94>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61bb      	str	r3, [r7, #24]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a78:	f001 fd8e 	bl	8007598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01f      	beq.n	8005ac8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a8c:	f000 f8f6 	bl	8005c7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	1e5a      	subs	r2, r3, #1
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00f      	beq.n	8005ac0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	3310      	adds	r3, #16
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fe7b 	bl	80067a0 <xTaskRemoveFromEventList>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ba4 <xQueueReceive+0x1c0>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ac0:	f001 fd9c 	bl	80075fc <vPortExitCritical>
				return pdPASS;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e069      	b.n	8005b9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ace:	f001 fd95 	bl	80075fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e062      	b.n	8005b9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005adc:	f107 0310 	add.w	r3, r7, #16
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fec1 	bl	8006868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aea:	f001 fd87 	bl	80075fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aee:	f000 fc23 	bl	8006338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005af2:	f001 fd51 	bl	8007598 <vPortEnterCritical>
 8005af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d103      	bne.n	8005b0c <xQueueReceive+0x128>
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d103      	bne.n	8005b22 <xQueueReceive+0x13e>
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b22:	f001 fd6b 	bl	80075fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b26:	1d3a      	adds	r2, r7, #4
 8005b28:	f107 0310 	add.w	r3, r7, #16
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 feb0 	bl	8006894 <xTaskCheckForTimeOut>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d123      	bne.n	8005b82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b3c:	f000 f916 	bl	8005d6c <prvIsQueueEmpty>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d017      	beq.n	8005b76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	3324      	adds	r3, #36	@ 0x24
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fdd4 	bl	80066fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b56:	f000 f8b7 	bl	8005cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b5a:	f000 fbfb 	bl	8006354 <xTaskResumeAll>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d189      	bne.n	8005a78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005b64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba4 <xQueueReceive+0x1c0>)
 8005b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	e780      	b.n	8005a78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b78:	f000 f8a6 	bl	8005cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b7c:	f000 fbea 	bl	8006354 <xTaskResumeAll>
 8005b80:	e77a      	b.n	8005a78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b84:	f000 f8a0 	bl	8005cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b88:	f000 fbe4 	bl	8006354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b8e:	f000 f8ed 	bl	8005d6c <prvIsQueueEmpty>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f43f af6f 	beq.w	8005a78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3730      	adds	r7, #48	@ 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d14d      	bne.n	8005c6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 ffce 	bl	8006b74 <xTaskPriorityDisinherit>
 8005bd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
 8005be0:	e043      	b.n	8005c6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d119      	bne.n	8005c1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6898      	ldr	r0, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	f002 f85e 	bl	8007cb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c00:	441a      	add	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d32b      	bcc.n	8005c6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	e026      	b.n	8005c6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68d8      	ldr	r0, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	461a      	mov	r2, r3
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	f002 f844 	bl	8007cb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c34:	425b      	negs	r3, r3
 8005c36:	441a      	add	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d207      	bcs.n	8005c58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	425b      	negs	r3, r3
 8005c52:	441a      	add	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d105      	bne.n	8005c6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d018      	beq.n	8005cc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c96:	441a      	add	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d303      	bcc.n	8005cb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68d9      	ldr	r1, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6838      	ldr	r0, [r7, #0]
 8005cbc:	f001 fffa 	bl	8007cb4 <memcpy>
	}
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cd0:	f001 fc62 	bl	8007598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cdc:	e011      	b.n	8005d02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d012      	beq.n	8005d0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3324      	adds	r3, #36	@ 0x24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fd58 	bl	80067a0 <xTaskRemoveFromEventList>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cf6:	f000 fe31 	bl	800695c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dce9      	bgt.n	8005cde <prvUnlockQueue+0x16>
 8005d0a:	e000      	b.n	8005d0e <prvUnlockQueue+0x46>
					break;
 8005d0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	22ff      	movs	r2, #255	@ 0xff
 8005d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d16:	f001 fc71 	bl	80075fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d1a:	f001 fc3d 	bl	8007598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d26:	e011      	b.n	8005d4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d012      	beq.n	8005d56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3310      	adds	r3, #16
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fd33 	bl	80067a0 <xTaskRemoveFromEventList>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d40:	f000 fe0c 	bl	800695c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	dce9      	bgt.n	8005d28 <prvUnlockQueue+0x60>
 8005d54:	e000      	b.n	8005d58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	22ff      	movs	r2, #255	@ 0xff
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d60:	f001 fc4c 	bl	80075fc <vPortExitCritical>
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d74:	f001 fc10 	bl	8007598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d102      	bne.n	8005d86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e001      	b.n	8005d8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d8a:	f001 fc37 	bl	80075fc <vPortExitCritical>

	return xReturn;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da0:	f001 fbfa 	bl	8007598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d102      	bne.n	8005db6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e001      	b.n	8005dba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dba:	f001 fc1f 	bl	80075fc <vPortExitCritical>

	return xReturn;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e014      	b.n	8005e02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e18 <vQueueAddToRegistry+0x50>)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005de4:	490c      	ldr	r1, [pc, #48]	@ (8005e18 <vQueueAddToRegistry+0x50>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dee:	4a0a      	ldr	r2, [pc, #40]	@ (8005e18 <vQueueAddToRegistry+0x50>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4413      	add	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dfa:	e006      	b.n	8005e0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b07      	cmp	r3, #7
 8005e06:	d9e7      	bls.n	8005dd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	20000dc0 	.word	0x20000dc0

08005e1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e2c:	f001 fbb4 	bl	8007598 <vPortEnterCritical>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e36:	b25b      	sxtb	r3, r3
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d103      	bne.n	8005e46 <vQueueWaitForMessageRestricted+0x2a>
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e4c:	b25b      	sxtb	r3, r3
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d103      	bne.n	8005e5c <vQueueWaitForMessageRestricted+0x40>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e5c:	f001 fbce 	bl	80075fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3324      	adds	r3, #36	@ 0x24
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fc69 	bl	8006748 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff26 	bl	8005cc8 <prvUnlockQueue>
	}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	@ 0x38
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <xTaskCreateStatic+0x4a>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	61fb      	str	r3, [r7, #28]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ece:	23a8      	movs	r3, #168	@ 0xa8
 8005ed0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ed6:	d00b      	beq.n	8005ef0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	61bb      	str	r3, [r7, #24]
}
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	e7fd      	b.n	8005eec <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01e      	beq.n	8005f34 <xTaskCreateStatic+0xb0>
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01b      	beq.n	8005f34 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f04:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	f107 0314 	add.w	r3, r7, #20
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f850 	bl	8005fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f2e:	f000 f8ed 	bl	800610c <prvAddNewTaskToReadyList>
 8005f32:	e001      	b.n	8005f38 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f38:	697b      	ldr	r3, [r7, #20]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3728      	adds	r7, #40	@ 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08c      	sub	sp, #48	@ 0x30
 8005f46:	af04      	add	r7, sp, #16
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fc40 	bl	80077dc <pvPortMalloc>
 8005f5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f64:	20a8      	movs	r0, #168	@ 0xa8
 8005f66:	f001 fc39 	bl	80077dc <pvPortMalloc>
 8005f6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f78:	e005      	b.n	8005f86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f7a:	6978      	ldr	r0, [r7, #20]
 8005f7c:	f001 fcf6 	bl	800796c <vPortFree>
 8005f80:	e001      	b.n	8005f86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9303      	str	r3, [sp, #12]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	9302      	str	r3, [sp, #8]
 8005f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f80e 	bl	8005fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fb0:	69f8      	ldr	r0, [r7, #28]
 8005fb2:	f000 f8ab 	bl	800610c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e002      	b.n	8005fc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	21a5      	movs	r1, #165	@ 0xa5
 8005fe6:	f001 fdd9 	bl	8007b9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	f023 0307 	bic.w	r3, r3, #7
 8006002:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	e012      	b.n	8006052 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	7819      	ldrb	r1, [r3, #0]
 8006034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	3334      	adds	r3, #52	@ 0x34
 800603c:	460a      	mov	r2, r1
 800603e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	3301      	adds	r3, #1
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d9e9      	bls.n	800602c <prvInitialiseNewTask+0x60>
 8006058:	e000      	b.n	800605c <prvInitialiseNewTask+0x90>
		{
			break;
 800605a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	2b37      	cmp	r3, #55	@ 0x37
 8006068:	d901      	bls.n	800606e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800606a:	2337      	movs	r3, #55	@ 0x37
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006072:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006078:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2200      	movs	r2, #0
 800607e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	3304      	adds	r3, #4
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff f971 	bl	800536c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	3318      	adds	r3, #24
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff f96c 	bl	800536c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	3354      	adds	r3, #84	@ 0x54
 80060be:	224c      	movs	r2, #76	@ 0x4c
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fd6a 	bl	8007b9c <memset>
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006100 <prvInitialiseNewTask+0x134>)
 80060cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <prvInitialiseNewTask+0x138>)
 80060d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80060d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <prvInitialiseNewTask+0x13c>)
 80060d8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	69b8      	ldr	r0, [r7, #24]
 80060e0:	f001 f92c 	bl	800733c <pxPortInitialiseStack>
 80060e4:	4602      	mov	r2, r0
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	bf00      	nop
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2000204c 	.word	0x2000204c
 8006104:	200020b4 	.word	0x200020b4
 8006108:	2000211c 	.word	0x2000211c

0800610c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006114:	f001 fa40 	bl	8007598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006118:	4b2d      	ldr	r3, [pc, #180]	@ (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3301      	adds	r3, #1
 800611e:	4a2c      	ldr	r2, [pc, #176]	@ (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006122:	4b2c      	ldr	r3, [pc, #176]	@ (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006130:	4b27      	ldr	r3, [pc, #156]	@ (80061d0 <prvAddNewTaskToReadyList+0xc4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d110      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006138:	f000 fc34 	bl	80069a4 <prvInitialiseTaskLists>
 800613c:	e00d      	b.n	800615a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800613e:	4b26      	ldr	r3, [pc, #152]	@ (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006146:	4b23      	ldr	r3, [pc, #140]	@ (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d802      	bhi.n	800615a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006154:	4a1f      	ldr	r2, [pc, #124]	@ (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615a:	4b20      	ldr	r3, [pc, #128]	@ (80061dc <prvAddNewTaskToReadyList+0xd0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	4a1e      	ldr	r2, [pc, #120]	@ (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006164:	4b1d      	ldr	r3, [pc, #116]	@ (80061dc <prvAddNewTaskToReadyList+0xd0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006170:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <prvAddNewTaskToReadyList+0x74>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	4a18      	ldr	r2, [pc, #96]	@ (80061e0 <prvAddNewTaskToReadyList+0xd4>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <prvAddNewTaskToReadyList+0xd8>)
 800618e:	441a      	add	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7ff f8f5 	bl	8005386 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800619c:	f001 fa2e 	bl	80075fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a0:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <prvAddNewTaskToReadyList+0xcc>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00e      	beq.n	80061c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061a8:	4b0a      	ldr	r3, [pc, #40]	@ (80061d4 <prvAddNewTaskToReadyList+0xc8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d207      	bcs.n	80061c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061b6:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <prvAddNewTaskToReadyList+0xdc>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200012d4 	.word	0x200012d4
 80061d4:	20000e00 	.word	0x20000e00
 80061d8:	200012e0 	.word	0x200012e0
 80061dc:	200012f0 	.word	0x200012f0
 80061e0:	200012dc 	.word	0x200012dc
 80061e4:	20000e04 	.word	0x20000e04
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d018      	beq.n	8006230 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061fe:	4b14      	ldr	r3, [pc, #80]	@ (8006250 <vTaskDelay+0x64>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <vTaskDelay+0x32>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800621e:	f000 f88b 	bl	8006338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006222:	2100      	movs	r1, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fd15 	bl	8006c54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800622a:	f000 f893 	bl	8006354 <xTaskResumeAll>
 800622e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <vTaskDelay+0x68>)
 8006238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	200012fc 	.word	0x200012fc
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	@ 0x28
 800625c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006266:	463a      	mov	r2, r7
 8006268:	1d39      	adds	r1, r7, #4
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f828 	bl	80052c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	460a      	mov	r2, r1
 8006286:	4924      	ldr	r1, [pc, #144]	@ (8006318 <vTaskStartScheduler+0xc0>)
 8006288:	4824      	ldr	r0, [pc, #144]	@ (800631c <vTaskStartScheduler+0xc4>)
 800628a:	f7ff fdfb 	bl	8005e84 <xTaskCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a23      	ldr	r2, [pc, #140]	@ (8006320 <vTaskStartScheduler+0xc8>)
 8006292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006294:	4b22      	ldr	r3, [pc, #136]	@ (8006320 <vTaskStartScheduler+0xc8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e001      	b.n	80062a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062ac:	f000 fd26 	bl	8006cfc <xTimerCreateTimerTask>
 80062b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d11b      	bne.n	80062f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	613b      	str	r3, [r7, #16]
}
 80062ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062cc:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <vTaskStartScheduler+0xcc>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3354      	adds	r3, #84	@ 0x54
 80062d2:	4a15      	ldr	r2, [pc, #84]	@ (8006328 <vTaskStartScheduler+0xd0>)
 80062d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062d6:	4b15      	ldr	r3, [pc, #84]	@ (800632c <vTaskStartScheduler+0xd4>)
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295
 80062dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062de:	4b14      	ldr	r3, [pc, #80]	@ (8006330 <vTaskStartScheduler+0xd8>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062e4:	4b13      	ldr	r3, [pc, #76]	@ (8006334 <vTaskStartScheduler+0xdc>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062ea:	f001 f8b1 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062ee:	e00f      	b.n	8006310 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d10b      	bne.n	8006310 <vTaskStartScheduler+0xb8>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <vTaskStartScheduler+0xb4>
}
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	08007df4 	.word	0x08007df4
 800631c:	08006975 	.word	0x08006975
 8006320:	200012f8 	.word	0x200012f8
 8006324:	20000e00 	.word	0x20000e00
 8006328:	2000001c 	.word	0x2000001c
 800632c:	200012f4 	.word	0x200012f4
 8006330:	200012e0 	.word	0x200012e0
 8006334:	200012d8 	.word	0x200012d8

08006338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <vTaskSuspendAll+0x18>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	4a03      	ldr	r2, [pc, #12]	@ (8006350 <vTaskSuspendAll+0x18>)
 8006344:	6013      	str	r3, [r2, #0]
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	200012fc 	.word	0x200012fc

08006354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006362:	4b42      	ldr	r3, [pc, #264]	@ (800646c <xTaskResumeAll+0x118>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <xTaskResumeAll+0x2e>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006382:	f001 f909 	bl	8007598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006386:	4b39      	ldr	r3, [pc, #228]	@ (800646c <xTaskResumeAll+0x118>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a37      	ldr	r2, [pc, #220]	@ (800646c <xTaskResumeAll+0x118>)
 800638e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006390:	4b36      	ldr	r3, [pc, #216]	@ (800646c <xTaskResumeAll+0x118>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d162      	bne.n	800645e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006398:	4b35      	ldr	r3, [pc, #212]	@ (8006470 <xTaskResumeAll+0x11c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05e      	beq.n	800645e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063a0:	e02f      	b.n	8006402 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80063a2:	4b34      	ldr	r3, [pc, #208]	@ (8006474 <xTaskResumeAll+0x120>)
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3318      	adds	r3, #24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff f846 	bl	8005440 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff f841 	bl	8005440 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006478 <xTaskResumeAll+0x124>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d903      	bls.n	80063d2 <xTaskResumeAll+0x7e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006478 <xTaskResumeAll+0x124>)
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4a27      	ldr	r2, [pc, #156]	@ (800647c <xTaskResumeAll+0x128>)
 80063e0:	441a      	add	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7fe ffcc 	bl	8005386 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f2:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <xTaskResumeAll+0x12c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80063fc:	4b21      	ldr	r3, [pc, #132]	@ (8006484 <xTaskResumeAll+0x130>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006402:	4b1c      	ldr	r3, [pc, #112]	@ (8006474 <xTaskResumeAll+0x120>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1cb      	bne.n	80063a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006410:	f000 fb6c 	bl	8006aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006414:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <xTaskResumeAll+0x134>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006420:	f000 f846 	bl	80064b0 <xTaskIncrementTick>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800642a:	4b16      	ldr	r3, [pc, #88]	@ (8006484 <xTaskResumeAll+0x130>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3b01      	subs	r3, #1
 8006434:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f1      	bne.n	8006420 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800643c:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <xTaskResumeAll+0x134>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <xTaskResumeAll+0x130>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800644e:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <xTaskResumeAll+0x138>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800645e:	f001 f8cd 	bl	80075fc <vPortExitCritical>

	return xAlreadyYielded;
 8006462:	68bb      	ldr	r3, [r7, #8]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	200012fc 	.word	0x200012fc
 8006470:	200012d4 	.word	0x200012d4
 8006474:	20001294 	.word	0x20001294
 8006478:	200012dc 	.word	0x200012dc
 800647c:	20000e04 	.word	0x20000e04
 8006480:	20000e00 	.word	0x20000e00
 8006484:	200012e8 	.word	0x200012e8
 8006488:	200012e4 	.word	0x200012e4
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006496:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <xTaskGetTickCount+0x1c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800649c:	687b      	ldr	r3, [r7, #4]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	200012d8 	.word	0x200012d8

080064b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ba:	4b52      	ldr	r3, [pc, #328]	@ (8006604 <xTaskIncrementTick+0x154>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 808f 	bne.w	80065e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064c4:	4b50      	ldr	r3, [pc, #320]	@ (8006608 <xTaskIncrementTick+0x158>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006608 <xTaskIncrementTick+0x158>)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d121      	bne.n	800651c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064d8:	4b4c      	ldr	r3, [pc, #304]	@ (800660c <xTaskIncrementTick+0x15c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00b      	beq.n	80064fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	603b      	str	r3, [r7, #0]
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	e7fd      	b.n	80064f6 <xTaskIncrementTick+0x46>
 80064fa:	4b44      	ldr	r3, [pc, #272]	@ (800660c <xTaskIncrementTick+0x15c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	4b43      	ldr	r3, [pc, #268]	@ (8006610 <xTaskIncrementTick+0x160>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a41      	ldr	r2, [pc, #260]	@ (800660c <xTaskIncrementTick+0x15c>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	4a41      	ldr	r2, [pc, #260]	@ (8006610 <xTaskIncrementTick+0x160>)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4b41      	ldr	r3, [pc, #260]	@ (8006614 <xTaskIncrementTick+0x164>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a3f      	ldr	r2, [pc, #252]	@ (8006614 <xTaskIncrementTick+0x164>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f000 fae8 	bl	8006aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800651c:	4b3e      	ldr	r3, [pc, #248]	@ (8006618 <xTaskIncrementTick+0x168>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d34e      	bcc.n	80065c4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006526:	4b39      	ldr	r3, [pc, #228]	@ (800660c <xTaskIncrementTick+0x15c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <xTaskIncrementTick+0x84>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <xTaskIncrementTick+0x86>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800653a:	4b37      	ldr	r3, [pc, #220]	@ (8006618 <xTaskIncrementTick+0x168>)
 800653c:	f04f 32ff 	mov.w	r2, #4294967295
 8006540:	601a      	str	r2, [r3, #0]
					break;
 8006542:	e03f      	b.n	80065c4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006544:	4b31      	ldr	r3, [pc, #196]	@ (800660c <xTaskIncrementTick+0x15c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d203      	bcs.n	8006564 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800655c:	4a2e      	ldr	r2, [pc, #184]	@ (8006618 <xTaskIncrementTick+0x168>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6013      	str	r3, [r2, #0]
						break;
 8006562:	e02f      	b.n	80065c4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe ff69 	bl	8005440 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3318      	adds	r3, #24
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe ff60 	bl	8005440 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4b25      	ldr	r3, [pc, #148]	@ (800661c <xTaskIncrementTick+0x16c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d903      	bls.n	8006594 <xTaskIncrementTick+0xe4>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	4a22      	ldr	r2, [pc, #136]	@ (800661c <xTaskIncrementTick+0x16c>)
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006620 <xTaskIncrementTick+0x170>)
 80065a2:	441a      	add	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f7fe feeb 	bl	8005386 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006624 <xTaskIncrementTick+0x174>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3b3      	bcc.n	8006526 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065c2:	e7b0      	b.n	8006526 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065c4:	4b17      	ldr	r3, [pc, #92]	@ (8006624 <xTaskIncrementTick+0x174>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ca:	4915      	ldr	r1, [pc, #84]	@ (8006620 <xTaskIncrementTick+0x170>)
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d907      	bls.n	80065ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e004      	b.n	80065ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065e2:	4b11      	ldr	r3, [pc, #68]	@ (8006628 <xTaskIncrementTick+0x178>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006628 <xTaskIncrementTick+0x178>)
 80065ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <xTaskIncrementTick+0x17c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065f8:	697b      	ldr	r3, [r7, #20]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	200012fc 	.word	0x200012fc
 8006608:	200012d8 	.word	0x200012d8
 800660c:	2000128c 	.word	0x2000128c
 8006610:	20001290 	.word	0x20001290
 8006614:	200012ec 	.word	0x200012ec
 8006618:	200012f4 	.word	0x200012f4
 800661c:	200012dc 	.word	0x200012dc
 8006620:	20000e04 	.word	0x20000e04
 8006624:	20000e00 	.word	0x20000e00
 8006628:	200012e4 	.word	0x200012e4
 800662c:	200012e8 	.word	0x200012e8

08006630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006636:	4b2b      	ldr	r3, [pc, #172]	@ (80066e4 <vTaskSwitchContext+0xb4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800663e:	4b2a      	ldr	r3, [pc, #168]	@ (80066e8 <vTaskSwitchContext+0xb8>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006644:	e047      	b.n	80066d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006646:	4b28      	ldr	r3, [pc, #160]	@ (80066e8 <vTaskSwitchContext+0xb8>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <vTaskSwitchContext+0xbc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e011      	b.n	8006678 <vTaskSwitchContext+0x48>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <vTaskSwitchContext+0x42>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	607b      	str	r3, [r7, #4]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <vTaskSwitchContext+0x3e>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3b01      	subs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	491d      	ldr	r1, [pc, #116]	@ (80066f0 <vTaskSwitchContext+0xc0>)
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	440b      	add	r3, r1
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0e3      	beq.n	8006654 <vTaskSwitchContext+0x24>
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a16      	ldr	r2, [pc, #88]	@ (80066f0 <vTaskSwitchContext+0xc0>)
 8006698:	4413      	add	r3, r2
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3308      	adds	r3, #8
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d104      	bne.n	80066bc <vTaskSwitchContext+0x8c>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4a0c      	ldr	r2, [pc, #48]	@ (80066f4 <vTaskSwitchContext+0xc4>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <vTaskSwitchContext+0xbc>)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <vTaskSwitchContext+0xc4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3354      	adds	r3, #84	@ 0x54
 80066d2:	4a09      	ldr	r2, [pc, #36]	@ (80066f8 <vTaskSwitchContext+0xc8>)
 80066d4:	6013      	str	r3, [r2, #0]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	200012fc 	.word	0x200012fc
 80066e8:	200012e8 	.word	0x200012e8
 80066ec:	200012dc 	.word	0x200012dc
 80066f0:	20000e04 	.word	0x20000e04
 80066f4:	20000e00 	.word	0x20000e00
 80066f8:	2000001c 	.word	0x2000001c

080066fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60fb      	str	r3, [r7, #12]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006724:	4b07      	ldr	r3, [pc, #28]	@ (8006744 <vTaskPlaceOnEventList+0x48>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3318      	adds	r3, #24
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fe fe4e 	bl	80053ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006732:	2101      	movs	r1, #1
 8006734:	6838      	ldr	r0, [r7, #0]
 8006736:	f000 fa8d 	bl	8006c54 <prvAddCurrentTaskToDelayedList>
}
 800673a:	bf00      	nop
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000e00 	.word	0x20000e00

08006748 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	617b      	str	r3, [r7, #20]
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006772:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <vTaskPlaceOnEventListRestricted+0x54>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3318      	adds	r3, #24
 8006778:	4619      	mov	r1, r3
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7fe fe03 	bl	8005386 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	68b8      	ldr	r0, [r7, #8]
 8006790:	f000 fa60 	bl	8006c54 <prvAddCurrentTaskToDelayedList>
	}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000e00 	.word	0x20000e00

080067a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60fb      	str	r3, [r7, #12]
}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	e7fd      	b.n	80067ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3318      	adds	r3, #24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fe34 	bl	8005440 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006850 <xTaskRemoveFromEventList+0xb0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11d      	bne.n	800681c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fe2b 	bl	8005440 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ee:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <xTaskRemoveFromEventList+0xb4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d903      	bls.n	80067fe <xTaskRemoveFromEventList+0x5e>
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	4a16      	ldr	r2, [pc, #88]	@ (8006854 <xTaskRemoveFromEventList+0xb4>)
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <xTaskRemoveFromEventList+0xb8>)
 800680c:	441a      	add	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f7fe fdb6 	bl	8005386 <vListInsertEnd>
 800681a:	e005      	b.n	8006828 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3318      	adds	r3, #24
 8006820:	4619      	mov	r1, r3
 8006822:	480e      	ldr	r0, [pc, #56]	@ (800685c <xTaskRemoveFromEventList+0xbc>)
 8006824:	f7fe fdaf 	bl	8005386 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682c:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <xTaskRemoveFromEventList+0xc0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	429a      	cmp	r2, r3
 8006834:	d905      	bls.n	8006842 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800683a:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <xTaskRemoveFromEventList+0xc4>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	e001      	b.n	8006846 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006846:	697b      	ldr	r3, [r7, #20]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200012fc 	.word	0x200012fc
 8006854:	200012dc 	.word	0x200012dc
 8006858:	20000e04 	.word	0x20000e04
 800685c:	20001294 	.word	0x20001294
 8006860:	20000e00 	.word	0x20000e00
 8006864:	200012e8 	.word	0x200012e8

08006868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006870:	4b06      	ldr	r3, [pc, #24]	@ (800688c <vTaskInternalSetTimeOutState+0x24>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <vTaskInternalSetTimeOutState+0x28>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	605a      	str	r2, [r3, #4]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	200012ec 	.word	0x200012ec
 8006890:	200012d8 	.word	0x200012d8

08006894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	613b      	str	r3, [r7, #16]
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60fb      	str	r3, [r7, #12]
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	e7fd      	b.n	80068d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068da:	f000 fe5d 	bl	8007598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068de:	4b1d      	ldr	r3, [pc, #116]	@ (8006954 <xTaskCheckForTimeOut+0xc0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d102      	bne.n	80068fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	e023      	b.n	8006946 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <xTaskCheckForTimeOut+0xc4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	429a      	cmp	r2, r3
 8006908:	d007      	beq.n	800691a <xTaskCheckForTimeOut+0x86>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	429a      	cmp	r2, r3
 8006912:	d302      	bcc.n	800691a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006914:	2301      	movs	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e015      	b.n	8006946 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	429a      	cmp	r2, r3
 8006922:	d20b      	bcs.n	800693c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad2      	subs	r2, r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff ff99 	bl	8006868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	e004      	b.n	8006946 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006942:	2301      	movs	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006946:	f000 fe59 	bl	80075fc <vPortExitCritical>

	return xReturn;
 800694a:	69fb      	ldr	r3, [r7, #28]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	200012d8 	.word	0x200012d8
 8006958:	200012ec 	.word	0x200012ec

0800695c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006960:	4b03      	ldr	r3, [pc, #12]	@ (8006970 <vTaskMissedYield+0x14>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	200012e8 	.word	0x200012e8

08006974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800697c:	f000 f852 	bl	8006a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006980:	4b06      	ldr	r3, [pc, #24]	@ (800699c <prvIdleTask+0x28>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d9f9      	bls.n	800697c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006988:	4b05      	ldr	r3, [pc, #20]	@ (80069a0 <prvIdleTask+0x2c>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006998:	e7f0      	b.n	800697c <prvIdleTask+0x8>
 800699a:	bf00      	nop
 800699c:	20000e04 	.word	0x20000e04
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069aa:	2300      	movs	r3, #0
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	e00c      	b.n	80069ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4a12      	ldr	r2, [pc, #72]	@ (8006a04 <prvInitialiseTaskLists+0x60>)
 80069bc:	4413      	add	r3, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fe fcb4 	bl	800532c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3301      	adds	r3, #1
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b37      	cmp	r3, #55	@ 0x37
 80069ce:	d9ef      	bls.n	80069b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069d0:	480d      	ldr	r0, [pc, #52]	@ (8006a08 <prvInitialiseTaskLists+0x64>)
 80069d2:	f7fe fcab 	bl	800532c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069d6:	480d      	ldr	r0, [pc, #52]	@ (8006a0c <prvInitialiseTaskLists+0x68>)
 80069d8:	f7fe fca8 	bl	800532c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069dc:	480c      	ldr	r0, [pc, #48]	@ (8006a10 <prvInitialiseTaskLists+0x6c>)
 80069de:	f7fe fca5 	bl	800532c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069e2:	480c      	ldr	r0, [pc, #48]	@ (8006a14 <prvInitialiseTaskLists+0x70>)
 80069e4:	f7fe fca2 	bl	800532c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069e8:	480b      	ldr	r0, [pc, #44]	@ (8006a18 <prvInitialiseTaskLists+0x74>)
 80069ea:	f7fe fc9f 	bl	800532c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069ee:	4b0b      	ldr	r3, [pc, #44]	@ (8006a1c <prvInitialiseTaskLists+0x78>)
 80069f0:	4a05      	ldr	r2, [pc, #20]	@ (8006a08 <prvInitialiseTaskLists+0x64>)
 80069f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a20 <prvInitialiseTaskLists+0x7c>)
 80069f6:	4a05      	ldr	r2, [pc, #20]	@ (8006a0c <prvInitialiseTaskLists+0x68>)
 80069f8:	601a      	str	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000e04 	.word	0x20000e04
 8006a08:	20001264 	.word	0x20001264
 8006a0c:	20001278 	.word	0x20001278
 8006a10:	20001294 	.word	0x20001294
 8006a14:	200012a8 	.word	0x200012a8
 8006a18:	200012c0 	.word	0x200012c0
 8006a1c:	2000128c 	.word	0x2000128c
 8006a20:	20001290 	.word	0x20001290

08006a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a2a:	e019      	b.n	8006a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a2c:	f000 fdb4 	bl	8007598 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a30:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <prvCheckTasksWaitingTermination+0x50>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fcff 	bl	8005440 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a42:	4b0d      	ldr	r3, [pc, #52]	@ (8006a78 <prvCheckTasksWaitingTermination+0x54>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	4a0b      	ldr	r2, [pc, #44]	@ (8006a78 <prvCheckTasksWaitingTermination+0x54>)
 8006a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <prvCheckTasksWaitingTermination+0x58>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3b01      	subs	r3, #1
 8006a52:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <prvCheckTasksWaitingTermination+0x58>)
 8006a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a56:	f000 fdd1 	bl	80075fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f810 	bl	8006a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a60:	4b06      	ldr	r3, [pc, #24]	@ (8006a7c <prvCheckTasksWaitingTermination+0x58>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e1      	bne.n	8006a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	200012a8 	.word	0x200012a8
 8006a78:	200012d4 	.word	0x200012d4
 8006a7c:	200012bc 	.word	0x200012bc

08006a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3354      	adds	r3, #84	@ 0x54
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 f88d 	bl	8007bac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d108      	bne.n	8006aae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 ff63 	bl	800796c <vPortFree>
				vPortFree( pxTCB );
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 ff60 	bl	800796c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006aac:	e019      	b.n	8006ae2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d103      	bne.n	8006ac0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 ff57 	bl	800796c <vPortFree>
	}
 8006abe:	e010      	b.n	8006ae2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d00b      	beq.n	8006ae2 <prvDeleteTCB+0x62>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	60fb      	str	r3, [r7, #12]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <prvDeleteTCB+0x5e>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b30 <prvResetNextTaskUnblockTime+0x44>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <prvResetNextTaskUnblockTime+0x14>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <prvResetNextTaskUnblockTime+0x16>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <prvResetNextTaskUnblockTime+0x48>)
 8006b08:	f04f 32ff 	mov.w	r2, #4294967295
 8006b0c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b0e:	e008      	b.n	8006b22 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b10:	4b07      	ldr	r3, [pc, #28]	@ (8006b30 <prvResetNextTaskUnblockTime+0x44>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <prvResetNextTaskUnblockTime+0x48>)
 8006b20:	6013      	str	r3, [r2, #0]
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	2000128c 	.word	0x2000128c
 8006b34:	200012f4 	.word	0x200012f4

08006b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <xTaskGetSchedulerState+0x34>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b46:	2301      	movs	r3, #1
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	e008      	b.n	8006b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b4c:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <xTaskGetSchedulerState+0x38>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b54:	2302      	movs	r3, #2
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	e001      	b.n	8006b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b5e:	687b      	ldr	r3, [r7, #4]
	}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	200012e0 	.word	0x200012e0
 8006b70:	200012fc 	.word	0x200012fc

08006b74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d058      	beq.n	8006c3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c48 <xTaskPriorityDisinherit+0xd4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d00b      	beq.n	8006bac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60bb      	str	r3, [r7, #8]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d02c      	beq.n	8006c3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d128      	bne.n	8006c3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fc26 	bl	8005440 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c4c <xTaskPriorityDisinherit+0xd8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d903      	bls.n	8006c1c <xTaskPriorityDisinherit+0xa8>
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	4a0c      	ldr	r2, [pc, #48]	@ (8006c4c <xTaskPriorityDisinherit+0xd8>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4a09      	ldr	r2, [pc, #36]	@ (8006c50 <xTaskPriorityDisinherit+0xdc>)
 8006c2a:	441a      	add	r2, r3
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7fe fba7 	bl	8005386 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c3c:	697b      	ldr	r3, [r7, #20]
	}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000e00 	.word	0x20000e00
 8006c4c:	200012dc 	.word	0x200012dc
 8006c50:	20000e04 	.word	0x20000e04

08006c54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c5e:	4b21      	ldr	r3, [pc, #132]	@ (8006ce4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c64:	4b20      	ldr	r3, [pc, #128]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fbe8 	bl	8005440 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d10a      	bne.n	8006c8e <prvAddCurrentTaskToDelayedList+0x3a>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4819      	ldr	r0, [pc, #100]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x98>)
 8006c88:	f7fe fb7d 	bl	8005386 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c8c:	e026      	b.n	8006cdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c96:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d209      	bcs.n	8006cba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ca6:	4b12      	ldr	r3, [pc, #72]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f7fe fb8b 	bl	80053ce <vListInsert>
}
 8006cb8:	e010      	b.n	8006cdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f7fe fb81 	bl	80053ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d202      	bcs.n	8006cdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cd6:	4a08      	ldr	r2, [pc, #32]	@ (8006cf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6013      	str	r3, [r2, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	200012d8 	.word	0x200012d8
 8006ce8:	20000e00 	.word	0x20000e00
 8006cec:	200012c0 	.word	0x200012c0
 8006cf0:	20001290 	.word	0x20001290
 8006cf4:	2000128c 	.word	0x2000128c
 8006cf8:	200012f4 	.word	0x200012f4

08006cfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	@ 0x28
 8006d00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d06:	f000 fad9 	bl	80072bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d80 <xTimerCreateTimerTask+0x84>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d021      	beq.n	8006d56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d1a:	1d3a      	adds	r2, r7, #4
 8006d1c:	f107 0108 	add.w	r1, r7, #8
 8006d20:	f107 030c 	add.w	r3, r7, #12
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe fae7 	bl	80052f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	2302      	movs	r3, #2
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	4911      	ldr	r1, [pc, #68]	@ (8006d84 <xTimerCreateTimerTask+0x88>)
 8006d3e:	4812      	ldr	r0, [pc, #72]	@ (8006d88 <xTimerCreateTimerTask+0x8c>)
 8006d40:	f7ff f8a0 	bl	8005e84 <xTaskCreateStatic>
 8006d44:	4603      	mov	r3, r0
 8006d46:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <xTimerCreateTimerTask+0x90>)
 8006d48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d4a:	4b10      	ldr	r3, [pc, #64]	@ (8006d8c <xTimerCreateTimerTask+0x90>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	613b      	str	r3, [r7, #16]
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d74:	697b      	ldr	r3, [r7, #20]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20001330 	.word	0x20001330
 8006d84:	08007dfc 	.word	0x08007dfc
 8006d88:	08006eb1 	.word	0x08006eb1
 8006d8c:	20001334 	.word	0x20001334

08006d90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	@ 0x28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <xTimerGenericCommand+0x30>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	623b      	str	r3, [r7, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	e7fd      	b.n	8006dbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dc0:	4b19      	ldr	r3, [pc, #100]	@ (8006e28 <xTimerGenericCommand+0x98>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d02a      	beq.n	8006e1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b05      	cmp	r3, #5
 8006dd8:	dc18      	bgt.n	8006e0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dda:	f7ff fead 	bl	8006b38 <xTaskGetSchedulerState>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d109      	bne.n	8006df8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de4:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <xTimerGenericCommand+0x98>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	f107 0110 	add.w	r1, r7, #16
 8006dec:	2300      	movs	r3, #0
 8006dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df0:	f7fe fc5a 	bl	80056a8 <xQueueGenericSend>
 8006df4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006df6:	e012      	b.n	8006e1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006df8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <xTimerGenericCommand+0x98>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	f107 0110 	add.w	r1, r7, #16
 8006e00:	2300      	movs	r3, #0
 8006e02:	2200      	movs	r2, #0
 8006e04:	f7fe fc50 	bl	80056a8 <xQueueGenericSend>
 8006e08:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e0a:	e008      	b.n	8006e1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <xTimerGenericCommand+0x98>)
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f107 0110 	add.w	r1, r7, #16
 8006e14:	2300      	movs	r3, #0
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	f7fe fd48 	bl	80058ac <xQueueGenericSendFromISR>
 8006e1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3728      	adds	r7, #40	@ 0x28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20001330 	.word	0x20001330

08006e2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e36:	4b1d      	ldr	r3, [pc, #116]	@ (8006eac <prvProcessExpiredTimer+0x80>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fafb 	bl	8005440 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d123      	bne.n	8006e9a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	18d1      	adds	r1, r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	6978      	ldr	r0, [r7, #20]
 8006e60:	f000 f8cc 	bl	8006ffc <prvInsertTimerInActiveList>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d017      	beq.n	8006e9a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	2100      	movs	r1, #0
 8006e74:	6978      	ldr	r0, [r7, #20]
 8006e76:	f7ff ff8b 	bl	8006d90 <xTimerGenericCommand>
 8006e7a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	60fb      	str	r3, [r7, #12]
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	e7fd      	b.n	8006e96 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	6978      	ldr	r0, [r7, #20]
 8006ea0:	4798      	blx	r3
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20001328 	.word	0x20001328

08006eb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb8:	f107 0308 	add.w	r3, r7, #8
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f859 	bl	8006f74 <prvGetNextExpireTime>
 8006ec2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f805 	bl	8006ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ece:	f000 f8d7 	bl	8007080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed2:	bf00      	nop
 8006ed4:	e7f0      	b.n	8006eb8 <prvTimerTask+0x8>
	...

08006ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ee2:	f7ff fa29 	bl	8006338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ee6:	f107 0308 	add.w	r3, r7, #8
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f866 	bl	8006fbc <prvSampleTimeNow>
 8006ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d130      	bne.n	8006f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <prvProcessTimerOrBlockTask+0x3c>
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d806      	bhi.n	8006f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f06:	f7ff fa25 	bl	8006354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff8d 	bl	8006e2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f12:	e024      	b.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <prvProcessTimerOrBlockTask+0x90>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf0c      	ite	eq
 8006f24:	2301      	moveq	r3, #1
 8006f26:	2300      	movne	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f6c <prvProcessTimerOrBlockTask+0x94>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7fe ff6f 	bl	8005e1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f3e:	f7ff fa09 	bl	8006354 <xTaskResumeAll>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <prvProcessTimerOrBlockTask+0x98>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
}
 8006f58:	e001      	b.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f5a:	f7ff f9fb 	bl	8006354 <xTaskResumeAll>
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	2000132c 	.word	0x2000132c
 8006f6c:	20001330 	.word	0x20001330
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <prvGetNextExpireTime+0x44>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f9a:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <prvGetNextExpireTime+0x44>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e001      	b.n	8006faa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	20001328 	.word	0x20001328

08006fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fc4:	f7ff fa64 	bl	8006490 <xTaskGetTickCount>
 8006fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <prvSampleTimeNow+0x3c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d205      	bcs.n	8006fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fd4:	f000 f910 	bl	80071f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e002      	b.n	8006fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fe6:	4a04      	ldr	r2, [pc, #16]	@ (8006ff8 <prvSampleTimeNow+0x3c>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20001338 	.word	0x20001338

08006ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d812      	bhi.n	8007048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e01b      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007036:	4b10      	ldr	r3, [pc, #64]	@ (8007078 <prvInsertTimerInActiveList+0x7c>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe f9c4 	bl	80053ce <vListInsert>
 8007046:	e012      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d206      	bcs.n	800705e <prvInsertTimerInActiveList+0x62>
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d302      	bcc.n	800705e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e007      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <prvInsertTimerInActiveList+0x80>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7fe f9b0 	bl	80053ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800706e:	697b      	ldr	r3, [r7, #20]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	2000132c 	.word	0x2000132c
 800707c:	20001328 	.word	0x20001328

08007080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007086:	e0a5      	b.n	80071d4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	da19      	bge.n	80070c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	3304      	adds	r3, #4
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	61fb      	str	r3, [r7, #28]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b8:	6850      	ldr	r0, [r2, #4]
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	6892      	ldr	r2, [r2, #8]
 80070be:	4611      	mov	r1, r2
 80070c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f2c0 8085 	blt.w	80071d4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe f9b0 	bl	8005440 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070e0:	463b      	mov	r3, r7
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff ff6a 	bl	8006fbc <prvSampleTimeNow>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	d86c      	bhi.n	80071ca <prvProcessReceivedCommands+0x14a>
 80070f0:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <prvProcessReceivedCommands+0x78>)
 80070f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f6:	bf00      	nop
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007121 	.word	0x08007121
 8007104:	080071cb 	.word	0x080071cb
 8007108:	0800717f 	.word	0x0800717f
 800710c:	080071b9 	.word	0x080071b9
 8007110:	08007121 	.word	0x08007121
 8007114:	08007121 	.word	0x08007121
 8007118:	080071cb 	.word	0x080071cb
 800711c:	0800717f 	.word	0x0800717f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	18d1      	adds	r1, r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800712c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800712e:	f7ff ff65 	bl	8006ffc <prvInsertTimerInActiveList>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d04a      	beq.n	80071ce <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800713e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d142      	bne.n	80071ce <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	441a      	add	r2, r3
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	2100      	movs	r1, #0
 8007158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715a:	f7ff fe19 	bl	8006d90 <xTimerGenericCommand>
 800715e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d133      	bne.n	80071ce <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	61bb      	str	r3, [r7, #24]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	617b      	str	r3, [r7, #20]
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	e7fd      	b.n	80071a0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	699a      	ldr	r2, [r3, #24]
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	18d1      	adds	r1, r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071b2:	f7ff ff23 	bl	8006ffc <prvInsertTimerInActiveList>
					break;
 80071b6:	e00d      	b.n	80071d4 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80071c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071c4:	f000 fbd2 	bl	800796c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071c8:	e003      	b.n	80071d2 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80071ca:	bf00      	nop
 80071cc:	e002      	b.n	80071d4 <prvProcessReceivedCommands+0x154>
					break;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <prvProcessReceivedCommands+0x154>
					break;
 80071d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071d4:	4b07      	ldr	r3, [pc, #28]	@ (80071f4 <prvProcessReceivedCommands+0x174>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	1d39      	adds	r1, r7, #4
 80071da:	2200      	movs	r2, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe fc01 	bl	80059e4 <xQueueReceive>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f af4f 	bne.w	8007088 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	3730      	adds	r7, #48	@ 0x30
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20001330 	.word	0x20001330

080071f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071fe:	e046      	b.n	800728e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007200:	4b2c      	ldr	r3, [pc, #176]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800720a:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3304      	adds	r3, #4
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe f911 	bl	8005440 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d12f      	bne.n	800728e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d90e      	bls.n	800725e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800724c:	4b19      	ldr	r3, [pc, #100]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fe f8b9 	bl	80053ce <vListInsert>
 800725c:	e017      	b.n	800728e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800725e:	2300      	movs	r3, #0
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	2300      	movs	r3, #0
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	2100      	movs	r1, #0
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fd91 	bl	8006d90 <xTimerGenericCommand>
 800726e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <prvSwitchTimerLists+0x96>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	603b      	str	r3, [r7, #0]
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	e7fd      	b.n	800728a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800728e:	4b09      	ldr	r3, [pc, #36]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1b3      	bne.n	8007200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <prvSwitchTimerLists+0xc0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <prvSwitchTimerLists+0xbc>)
 80072a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072a6:	4a04      	ldr	r2, [pc, #16]	@ (80072b8 <prvSwitchTimerLists+0xc0>)
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	6013      	str	r3, [r2, #0]
}
 80072ac:	bf00      	nop
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20001328 	.word	0x20001328
 80072b8:	2000132c 	.word	0x2000132c

080072bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072c2:	f000 f969 	bl	8007598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072c6:	4b15      	ldr	r3, [pc, #84]	@ (800731c <prvCheckForValidListAndQueue+0x60>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d120      	bne.n	8007310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072ce:	4814      	ldr	r0, [pc, #80]	@ (8007320 <prvCheckForValidListAndQueue+0x64>)
 80072d0:	f7fe f82c 	bl	800532c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072d4:	4813      	ldr	r0, [pc, #76]	@ (8007324 <prvCheckForValidListAndQueue+0x68>)
 80072d6:	f7fe f829 	bl	800532c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072da:	4b13      	ldr	r3, [pc, #76]	@ (8007328 <prvCheckForValidListAndQueue+0x6c>)
 80072dc:	4a10      	ldr	r2, [pc, #64]	@ (8007320 <prvCheckForValidListAndQueue+0x64>)
 80072de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072e0:	4b12      	ldr	r3, [pc, #72]	@ (800732c <prvCheckForValidListAndQueue+0x70>)
 80072e2:	4a10      	ldr	r2, [pc, #64]	@ (8007324 <prvCheckForValidListAndQueue+0x68>)
 80072e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072e6:	2300      	movs	r3, #0
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <prvCheckForValidListAndQueue+0x74>)
 80072ec:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <prvCheckForValidListAndQueue+0x78>)
 80072ee:	2110      	movs	r1, #16
 80072f0:	200a      	movs	r0, #10
 80072f2:	f7fe f939 	bl	8005568 <xQueueGenericCreateStatic>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4a08      	ldr	r2, [pc, #32]	@ (800731c <prvCheckForValidListAndQueue+0x60>)
 80072fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <prvCheckForValidListAndQueue+0x60>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007304:	4b05      	ldr	r3, [pc, #20]	@ (800731c <prvCheckForValidListAndQueue+0x60>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	490b      	ldr	r1, [pc, #44]	@ (8007338 <prvCheckForValidListAndQueue+0x7c>)
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fd5c 	bl	8005dc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007310:	f000 f974 	bl	80075fc <vPortExitCritical>
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20001330 	.word	0x20001330
 8007320:	20001300 	.word	0x20001300
 8007324:	20001314 	.word	0x20001314
 8007328:	20001328 	.word	0x20001328
 800732c:	2000132c 	.word	0x2000132c
 8007330:	200013dc 	.word	0x200013dc
 8007334:	2000133c 	.word	0x2000133c
 8007338:	08007e04 	.word	0x08007e04

0800733c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3b04      	subs	r3, #4
 800734c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b04      	subs	r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f023 0201 	bic.w	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3b04      	subs	r3, #4
 800736a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800736c:	4a0c      	ldr	r2, [pc, #48]	@ (80073a0 <pxPortInitialiseStack+0x64>)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3b14      	subs	r3, #20
 8007376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3b04      	subs	r3, #4
 8007382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f06f 0202 	mvn.w	r2, #2
 800738a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b20      	subs	r3, #32
 8007390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007392:	68fb      	ldr	r3, [r7, #12]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	080073a5 	.word	0x080073a5

080073a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073ae:	4b13      	ldr	r3, [pc, #76]	@ (80073fc <prvTaskExitError+0x58>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d00b      	beq.n	80073d0 <prvTaskExitError+0x2c>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	60fb      	str	r3, [r7, #12]
}
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
 80073ce:	e7fd      	b.n	80073cc <prvTaskExitError+0x28>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60bb      	str	r3, [r7, #8]
}
 80073e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073e4:	bf00      	nop
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0fc      	beq.n	80073e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000018 	.word	0x20000018

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	@ (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	20000e00 	.word	0x20000e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	@ (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b47      	ldr	r3, [pc, #284]	@ (8007574 <xPortStartScheduler+0x124>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a47      	ldr	r2, [pc, #284]	@ (8007578 <xPortStartScheduler+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10b      	bne.n	8007478 <xPortStartScheduler+0x28>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60fb      	str	r3, [r7, #12]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007478:	4b3e      	ldr	r3, [pc, #248]	@ (8007574 <xPortStartScheduler+0x124>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a3f      	ldr	r2, [pc, #252]	@ (800757c <xPortStartScheduler+0x12c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d10b      	bne.n	800749a <xPortStartScheduler+0x4a>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	613b      	str	r3, [r7, #16]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800749a:	4b39      	ldr	r3, [pc, #228]	@ (8007580 <xPortStartScheduler+0x130>)
 800749c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	22ff      	movs	r2, #255	@ 0xff
 80074aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	4b31      	ldr	r3, [pc, #196]	@ (8007584 <xPortStartScheduler+0x134>)
 80074c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074c2:	4b31      	ldr	r3, [pc, #196]	@ (8007588 <xPortStartScheduler+0x138>)
 80074c4:	2207      	movs	r2, #7
 80074c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c8:	e009      	b.n	80074de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80074ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007588 <xPortStartScheduler+0x138>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007588 <xPortStartScheduler+0x138>)
 80074d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e6:	2b80      	cmp	r3, #128	@ 0x80
 80074e8:	d0ef      	beq.n	80074ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ea:	4b27      	ldr	r3, [pc, #156]	@ (8007588 <xPortStartScheduler+0x138>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1c3 0307 	rsb	r3, r3, #7
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d00b      	beq.n	800750e <xPortStartScheduler+0xbe>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60bb      	str	r3, [r7, #8]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800750e:	4b1e      	ldr	r3, [pc, #120]	@ (8007588 <xPortStartScheduler+0x138>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <xPortStartScheduler+0x138>)
 8007516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007518:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <xPortStartScheduler+0x138>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007520:	4a19      	ldr	r2, [pc, #100]	@ (8007588 <xPortStartScheduler+0x138>)
 8007522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800752c:	4b17      	ldr	r3, [pc, #92]	@ (800758c <xPortStartScheduler+0x13c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a16      	ldr	r2, [pc, #88]	@ (800758c <xPortStartScheduler+0x13c>)
 8007532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007538:	4b14      	ldr	r3, [pc, #80]	@ (800758c <xPortStartScheduler+0x13c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a13      	ldr	r2, [pc, #76]	@ (800758c <xPortStartScheduler+0x13c>)
 800753e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007544:	f000 f8da 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007548:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <xPortStartScheduler+0x140>)
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800754e:	f000 f8f9 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007552:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <xPortStartScheduler+0x144>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a0f      	ldr	r2, [pc, #60]	@ (8007594 <xPortStartScheduler+0x144>)
 8007558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800755c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800755e:	f7ff ff63 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007562:	f7ff f865 	bl	8006630 <vTaskSwitchContext>
	prvTaskExitError();
 8007566:	f7ff ff1d 	bl	80073a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	e000ed00 	.word	0xe000ed00
 8007578:	410fc271 	.word	0x410fc271
 800757c:	410fc270 	.word	0x410fc270
 8007580:	e000e400 	.word	0xe000e400
 8007584:	2000142c 	.word	0x2000142c
 8007588:	20001430 	.word	0x20001430
 800758c:	e000ed20 	.word	0xe000ed20
 8007590:	20000018 	.word	0x20000018
 8007594:	e000ef34 	.word	0xe000ef34

08007598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
}
 80075b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075b2:	4b10      	ldr	r3, [pc, #64]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3301      	adds	r3, #1
 80075b8:	4a0e      	ldr	r2, [pc, #56]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075bc:	4b0d      	ldr	r3, [pc, #52]	@ (80075f4 <vPortEnterCritical+0x5c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c4:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <vPortEnterCritical+0x60>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	603b      	str	r3, [r7, #0]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <vPortEnterCritical+0x4a>
	}
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000018 	.word	0x20000018
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007602:	4b12      	ldr	r3, [pc, #72]	@ (800764c <vPortExitCritical+0x50>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <vPortExitCritical+0x26>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007622:	4b0a      	ldr	r3, [pc, #40]	@ (800764c <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3b01      	subs	r3, #1
 8007628:	4a08      	ldr	r2, [pc, #32]	@ (800764c <vPortExitCritical+0x50>)
 800762a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800762c:	4b07      	ldr	r3, [pc, #28]	@ (800764c <vPortExitCritical+0x50>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d105      	bne.n	8007640 <vPortExitCritical+0x44>
 8007634:	2300      	movs	r3, #0
 8007636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	f383 8811 	msr	BASEPRI, r3
}
 800763e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000018 	.word	0x20000018

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7fe ffd6 	bl	8006630 <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20000e00 	.word	0x20000e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe feed 	bl	80064b0 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <SysTick_Handler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	@ (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	@ (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	2000000c 	.word	0x2000000c
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d915      	bls.n	8007796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a18      	ldr	r2, [pc, #96]	@ (80077cc <vPortValidateInterruptPriority+0x74>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20b      	bcs.n	8007796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007796:	4b0f      	ldr	r3, [pc, #60]	@ (80077d4 <vPortValidateInterruptPriority+0x7c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800779e:	4b0e      	ldr	r3, [pc, #56]	@ (80077d8 <vPortValidateInterruptPriority+0x80>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d90b      	bls.n	80077be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	603b      	str	r3, [r7, #0]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <vPortValidateInterruptPriority+0x62>
	}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	e000e3f0 	.word	0xe000e3f0
 80077d0:	2000142c 	.word	0x2000142c
 80077d4:	e000ed0c 	.word	0xe000ed0c
 80077d8:	20001430 	.word	0x20001430

080077dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	@ 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e8:	f7fe fda6 	bl	8006338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007958 <pvPortMalloc+0x17c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f4:	f000 f916 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f8:	4b58      	ldr	r3, [pc, #352]	@ (800795c <pvPortMalloc+0x180>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4013      	ands	r3, r2
 8007800:	2b00      	cmp	r3, #0
 8007802:	f040 8090 	bne.w	8007926 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01e      	beq.n	800784a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800780c:	2208      	movs	r2, #8
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4413      	add	r3, r2
 8007812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d015      	beq.n	800784a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f023 0307 	bic.w	r3, r3, #7
 8007824:	3308      	adds	r3, #8
 8007826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <pvPortMalloc+0x6e>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d06a      	beq.n	8007926 <pvPortMalloc+0x14a>
 8007850:	4b43      	ldr	r3, [pc, #268]	@ (8007960 <pvPortMalloc+0x184>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	429a      	cmp	r2, r3
 8007858:	d865      	bhi.n	8007926 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800785a:	4b42      	ldr	r3, [pc, #264]	@ (8007964 <pvPortMalloc+0x188>)
 800785c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800785e:	4b41      	ldr	r3, [pc, #260]	@ (8007964 <pvPortMalloc+0x188>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007864:	e004      	b.n	8007870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d903      	bls.n	8007882 <pvPortMalloc+0xa6>
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1f1      	bne.n	8007866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007882:	4b35      	ldr	r3, [pc, #212]	@ (8007958 <pvPortMalloc+0x17c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007888:	429a      	cmp	r2, r3
 800788a:	d04c      	beq.n	8007926 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2208      	movs	r2, #8
 8007892:	4413      	add	r3, r2
 8007894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	1ad2      	subs	r2, r2, r3
 80078a6:	2308      	movs	r3, #8
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d920      	bls.n	80078f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <pvPortMalloc+0xfc>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078ea:	69b8      	ldr	r0, [r7, #24]
 80078ec:	f000 f8fc 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <pvPortMalloc+0x184>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	4a19      	ldr	r2, [pc, #100]	@ (8007960 <pvPortMalloc+0x184>)
 80078fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078fe:	4b18      	ldr	r3, [pc, #96]	@ (8007960 <pvPortMalloc+0x184>)
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b19      	ldr	r3, [pc, #100]	@ (8007968 <pvPortMalloc+0x18c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d203      	bcs.n	8007912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <pvPortMalloc+0x184>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <pvPortMalloc+0x18c>)
 8007910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	4b11      	ldr	r3, [pc, #68]	@ (800795c <pvPortMalloc+0x180>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	431a      	orrs	r2, r3
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007926:	f7fe fd15 	bl	8006354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <pvPortMalloc+0x170>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <pvPortMalloc+0x16c>
	return pvReturn;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	@ 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	2000203c 	.word	0x2000203c
 800795c:	20002048 	.word	0x20002048
 8007960:	20002040 	.word	0x20002040
 8007964:	20002034 	.word	0x20002034
 8007968:	20002044 	.word	0x20002044

0800796c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d04a      	beq.n	8007a14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800797e:	2308      	movs	r3, #8
 8007980:	425b      	negs	r3, r3
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4b22      	ldr	r3, [pc, #136]	@ (8007a1c <vPortFree+0xb0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortFree+0x46>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60fb      	str	r3, [r7, #12]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <vPortFree+0x66>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <vPortFree+0xb0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d019      	beq.n	8007a14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d115      	bne.n	8007a14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <vPortFree+0xb0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	401a      	ands	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f8:	f7fe fc9e 	bl	8006338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <vPortFree+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a06      	ldr	r2, [pc, #24]	@ (8007a20 <vPortFree+0xb4>)
 8007a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f86c 	bl	8007ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007a10:	f7fe fca0 	bl	8006354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20002048 	.word	0x20002048
 8007a20:	20002040 	.word	0x20002040

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	@ (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	@ (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20001434 	.word	0x20001434
 8007ad4:	20002034 	.word	0x20002034
 8007ad8:	2000203c 	.word	0x2000203c
 8007adc:	20002044 	.word	0x20002044
 8007ae0:	20002040 	.word	0x20002040
 8007ae4:	20002048 	.word	0x20002048

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20002034 	.word	0x20002034
 8007b98:	2000203c 	.word	0x2000203c

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_reclaim_reent>:
 8007bac:	4b2d      	ldr	r3, [pc, #180]	@ (8007c64 <_reclaim_reent+0xb8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	b570      	push	{r4, r5, r6, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	d053      	beq.n	8007c60 <_reclaim_reent+0xb4>
 8007bb8:	69c3      	ldr	r3, [r0, #28]
 8007bba:	b31b      	cbz	r3, 8007c04 <_reclaim_reent+0x58>
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	b163      	cbz	r3, 8007bda <_reclaim_reent+0x2e>
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	5959      	ldr	r1, [r3, r5]
 8007bc8:	b9b1      	cbnz	r1, 8007bf8 <_reclaim_reent+0x4c>
 8007bca:	3504      	adds	r5, #4
 8007bcc:	2d80      	cmp	r5, #128	@ 0x80
 8007bce:	d1f8      	bne.n	8007bc2 <_reclaim_reent+0x16>
 8007bd0:	69e3      	ldr	r3, [r4, #28]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	68d9      	ldr	r1, [r3, #12]
 8007bd6:	f000 f87b 	bl	8007cd0 <_free_r>
 8007bda:	69e3      	ldr	r3, [r4, #28]
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	b111      	cbz	r1, 8007be6 <_reclaim_reent+0x3a>
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 f875 	bl	8007cd0 <_free_r>
 8007be6:	69e3      	ldr	r3, [r4, #28]
 8007be8:	689d      	ldr	r5, [r3, #8]
 8007bea:	b15d      	cbz	r5, 8007c04 <_reclaim_reent+0x58>
 8007bec:	4629      	mov	r1, r5
 8007bee:	4620      	mov	r0, r4
 8007bf0:	682d      	ldr	r5, [r5, #0]
 8007bf2:	f000 f86d 	bl	8007cd0 <_free_r>
 8007bf6:	e7f8      	b.n	8007bea <_reclaim_reent+0x3e>
 8007bf8:	680e      	ldr	r6, [r1, #0]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f868 	bl	8007cd0 <_free_r>
 8007c00:	4631      	mov	r1, r6
 8007c02:	e7e1      	b.n	8007bc8 <_reclaim_reent+0x1c>
 8007c04:	6961      	ldr	r1, [r4, #20]
 8007c06:	b111      	cbz	r1, 8007c0e <_reclaim_reent+0x62>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 f861 	bl	8007cd0 <_free_r>
 8007c0e:	69e1      	ldr	r1, [r4, #28]
 8007c10:	b111      	cbz	r1, 8007c18 <_reclaim_reent+0x6c>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 f85c 	bl	8007cd0 <_free_r>
 8007c18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c1a:	b111      	cbz	r1, 8007c22 <_reclaim_reent+0x76>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f857 	bl	8007cd0 <_free_r>
 8007c22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c24:	b111      	cbz	r1, 8007c2c <_reclaim_reent+0x80>
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f852 	bl	8007cd0 <_free_r>
 8007c2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c2e:	b111      	cbz	r1, 8007c36 <_reclaim_reent+0x8a>
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 f84d 	bl	8007cd0 <_free_r>
 8007c36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c38:	b111      	cbz	r1, 8007c40 <_reclaim_reent+0x94>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 f848 	bl	8007cd0 <_free_r>
 8007c40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c42:	b111      	cbz	r1, 8007c4a <_reclaim_reent+0x9e>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 f843 	bl	8007cd0 <_free_r>
 8007c4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c4c:	b111      	cbz	r1, 8007c54 <_reclaim_reent+0xa8>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f83e 	bl	8007cd0 <_free_r>
 8007c54:	6a23      	ldr	r3, [r4, #32]
 8007c56:	b11b      	cbz	r3, 8007c60 <_reclaim_reent+0xb4>
 8007c58:	4620      	mov	r0, r4
 8007c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c5e:	4718      	bx	r3
 8007c60:	bd70      	pop	{r4, r5, r6, pc}
 8007c62:	bf00      	nop
 8007c64:	2000001c 	.word	0x2000001c

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cac <__libc_init_array+0x44>)
 8007c7c:	f000 f87e 	bl	8007d7c <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	08008678 	.word	0x08008678
 8007ca4:	08008678 	.word	0x08008678
 8007ca8:	08008678 	.word	0x08008678
 8007cac:	0800867c 	.word	0x0800867c

08007cb0 <__retarget_lock_acquire_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_release_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <memcpy>:
 8007cb4:	440a      	add	r2, r1
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cbc:	d100      	bne.n	8007cc0 <memcpy+0xc>
 8007cbe:	4770      	bx	lr
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	d1f9      	bne.n	8007cc2 <memcpy+0xe>
 8007cce:	bd10      	pop	{r4, pc}

08007cd0 <_free_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d041      	beq.n	8007d5c <_free_r+0x8c>
 8007cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cdc:	1f0c      	subs	r4, r1, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfb8      	it	lt
 8007ce2:	18e4      	addlt	r4, r4, r3
 8007ce4:	f000 f83e 	bl	8007d64 <__malloc_lock>
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d60 <_free_r+0x90>)
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	b933      	cbnz	r3, 8007cfc <_free_r+0x2c>
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	6014      	str	r4, [r2, #0]
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf8:	f000 b83a 	b.w	8007d70 <__malloc_unlock>
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d908      	bls.n	8007d12 <_free_r+0x42>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	1821      	adds	r1, r4, r0
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf01      	itttt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	1809      	addeq	r1, r1, r0
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	e7ed      	b.n	8007cee <_free_r+0x1e>
 8007d12:	461a      	mov	r2, r3
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b10b      	cbz	r3, 8007d1c <_free_r+0x4c>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d9fa      	bls.n	8007d12 <_free_r+0x42>
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	1850      	adds	r0, r2, r1
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d10b      	bne.n	8007d3c <_free_r+0x6c>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	4401      	add	r1, r0
 8007d28:	1850      	adds	r0, r2, r1
 8007d2a:	4283      	cmp	r3, r0
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	d1e0      	bne.n	8007cf2 <_free_r+0x22>
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	4408      	add	r0, r1
 8007d38:	6010      	str	r0, [r2, #0]
 8007d3a:	e7da      	b.n	8007cf2 <_free_r+0x22>
 8007d3c:	d902      	bls.n	8007d44 <_free_r+0x74>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	e7d6      	b.n	8007cf2 <_free_r+0x22>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	1821      	adds	r1, r4, r0
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf04      	itt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	bf04      	itt	eq
 8007d54:	1809      	addeq	r1, r1, r0
 8007d56:	6021      	streq	r1, [r4, #0]
 8007d58:	6054      	str	r4, [r2, #4]
 8007d5a:	e7ca      	b.n	8007cf2 <_free_r+0x22>
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	bf00      	nop
 8007d60:	20002188 	.word	0x20002188

08007d64 <__malloc_lock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	@ (8007d6c <__malloc_lock+0x8>)
 8007d66:	f7ff bfa3 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20002184 	.word	0x20002184

08007d70 <__malloc_unlock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	@ (8007d78 <__malloc_unlock+0x8>)
 8007d72:	f7ff bf9e 	b.w	8007cb2 <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	20002184 	.word	0x20002184

08007d7c <_init>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr

08007d88 <_fini>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr
